{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web 2022 \u0410\u043d\u043d\u0430 \u041f\u0435\u0442\u0440\u043e\u0441\u044f\u043d K33422","title":"\u0417\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e"},{"location":"#web-2022","text":"","title":"Web 2022"},{"location":"#k33422","text":"","title":"\u0410\u043d\u043d\u0430 \u041f\u0435\u0442\u0440\u043e\u0441\u044f\u043d K33422"},{"location":"l1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041a\u043b\u0438\u0435\u043d\u0442 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442 \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. DGRAM \u0437\u0430\u0445\u043e\u0434\u0438\u043b \u0432 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u0443\u044e \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e TCP. #server import socket port = 3968 host = socket.gethostbyname(\"localhost\") mess=\"Hello, client\" message = bytes(mess, 'utf-8') sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0) #use TCP #int sock = 1 sock.bind((host, port)) #\u0441\u0432\u044f\u0437\u044c \u0441\u043e\u043a\u0435\u0442\u0430 \u0441 \u0445\u043e\u0441\u0442\u043e\u043c \u0438 \u043f\u043e\u0440\u0442\u043e\u043c sock.listen(10) #n listenings cl_sock, addr = sock.accept() #\u043f\u0440\u0438\u0451\u043c \u0438 \u043f\u043e\u0441\u044b\u043b\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 data = cl_sock.recv(1024) #\u043f\u043e\u0440\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 print(data.decode()) cl_sock.send(message) sock.close() #\u0437\u0430\u043a\u0440\u044b\u043b\u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438 #client import socket port = 3968 host = socket.gethostbyname(\"localhost\") mess=\"Hello, server\" message = bytes(mess, 'utf-8') sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #_stream for tcp dgram udp sock.connect((host, port)) sock.send(message) data = sock.recv(1024) print(data.decode()) sock.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 - \u0420\u0435\u0448\u0438\u0442\u044c \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0435 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435, \u0432\u0432\u043e\u0434\u044f \u0435\u0433\u043e \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u043a\u043e\u0440\u043d\u0438 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f (\u0438\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u0438\u0445 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438) \u0432 \u0432\u0438\u0434\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f import socket from math import sqrt port = 3968 host = socket.gethostbyname(\"localhost\") sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0) #use TCP sock.bind((host, port)) #\u0441\u0432\u044f\u0437\u044c \u0441\u043e\u043a\u0435\u0442\u0430 \u0441 \u0445\u043e\u0441\u0442\u043e\u043c \u0438 \u043f\u043e\u0440\u0442\u043e\u043c sock.listen(10) #n listenings cl_sock, addr = sock.accept() #\u043f\u0440\u0438\u0451\u043c \u0438 \u043f\u043e\u0441\u044b\u043b\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 data=cl_sock.recv(1024) print(data) a, b,c = map(lambda x: int(x), data.split()) #conn.sendall('Wrong input format!\\n'.encode()) D = b**2 - 4 * a * c if D > 0: x1, x2 = (-b + sqrt(D)) / (2 * a), (-b - sqrt(D)) / (2 * a) cl_sock.sendall(f'\u041a\u043e\u0440\u043d\u0438 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f: {x1}, {x2}\\n'.encode()) elif D == 0: x = (-b) / (2 * a) cl_sock.sendall(f'\u041a\u043e\u0440\u0435\u043d\u044c \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f: {x}\\n'.encode()) else: cl_sock.sendall(f'\u041d\u0435\u0442 \u043a\u043e\u0440\u043d\u0435\u0439'.encode()) #message = bytes(mess, 'utf-8') print(data.decode()) sock.close() #\u0437\u0430\u043a\u0440\u044b\u043b\u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 #client import socket port = 3968 host = socket.gethostbyname(\"localhost\") #host=\"127.0.0.1\" sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #_stream for tcp dgram udp sock.connect((host, port)) #data = sock.recv(1024) a=input('Type the first variable x^2 ') b=input('Type the second linear vatiable x ') c=input('Type the third variable ') #sock.send(int.from_bytes([a,b,c],byteorder='big',signed=True)) equation=a +\" \"+ b +\" \"+ c sock.send(equation.encode('utf-8')) #sock.send(a,b,c) data = (sock.recv(1024)).decode('utf-8') print(data) sock.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0432 \u043e\u0442\u0432\u0435\u0442 http-\u0441\u0442\u0440\u0430\u043d\u0446\u0443, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442\u0441\u044f \u0438\u0437 index.html. \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 http://localhost:3968 #server import socket port = 3968 host = socket.gethostbyname(\"localhost\") sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0) sock.bind((host, port)) sock.listen(10) sock, addr = sock.accept() sock.recv(16384) response_type = \"HTTP/1.0 200 OK\\n\" headers = \"Content-Type: text/html\\n\\n\" page = open('index.html','r') body = page.read() resp = response_type + headers + body sock.send(resp.encode(\"utf-8\")) page.close() sock.close() #client import socket port = 3968 host = socket.gethostbyname(\"localhost\") mess=\"Hello, server\" message = bytes(mess, 'utf-8') sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #_stream for tcp dgram udp sock.connect((host, port)) sock.send(message) data = sock.recv(1024) print(data.decode()) sock.close() #index <!DOCTYPE html> <html lang=\"fr\"> <head> <meta charset=\"UTF-8\"> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Document</title> </head> <body> <h1><span style=\"color:rgb(255, 97, 163)\"><b>Mon premier site</b></span></h1> <p>Pour naviguer sur la page veiller cliquer:</p> <ul> <li><a href=\"#inf\">Infos personnelles</a></li> <li><a href=\"#Comp\u00e9tences\">Comp\u00e9tences</a></li> <li><a href=\"#Centre d'inter\u00eats\">Centre d'inter\u00eats</a></li> </ul> <hr> <h2><a name=\"inf\"><span style=\"color:#7B68EE\"><b>Infos personnelles</b></span></a></h2> <hr> <p>Salut! Je m'appelle <span style=\"color:#C71585\">Anne</span>, j'ai 19 ans.</p> <p>Je fais mes \u00e9tudes \u00e0 l'universit\u00e9 de fili\u00e8re technique et j'aime retoucher les photos, surtout des photos des patineurs artistiques.<br></p> <hr> <h2><a name=\"Comp\u00e9tences\"><span style=\"color:#7B68EE\"><b>Comp\u00e9tences</b></span></a></h2> <p><hr>Tu peux aussi me connecter si tu as besoin de: <ul type=\"circle\"> <li>construire <span style=\"color:#C71585\">les sites</span></li> <li>consulter sur <span style=\"color:#C71585\">les devoirs \u00e0 domicile</span></spqn></li> <li>retoucher <span style=\"color:#C71585\">les photos</span></li> </ul> <hr> </p> <h2><a name=\"Centre d'inter\u00eats\"><span style=\"color:#7B68EE\"><b>Centre d'inter\u00eats</b></span></a></h2> <hr> <ul type=\"circle\"> <li>Composition de <span style=\"color:#C71585\">la musique</span></li> <li>Apprentissage <span style=\"color:#C71585\">des langues \u00e9trang\u00e8res</span></li> <li>Application <span style=\"color:#C71585\">d'int\u00e9lligence artificielle \u00e0 la m\u00e9decine</span></li> </ul> <hr> \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0412 \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u043d\u043e\u0441\u044f\u0442\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u044b: \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u044f\u0441\u044c \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0432\u0432\u0435\u0441\u0442\u0438 \u0438\u043c\u044f, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f. \u0421 \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u044d\u0442\u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u0414\u0430\u043b\u0435\u0435 \u043d\u043e\u0432\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442 \u0442\u0435 \u0436\u0435 \u044d\u0442\u0430\u043f\u044b. \u0424\u0443\u043d\u043a\u0446\u0438\u044f broadcast - \u043f\u043e\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d\u043d\u044b\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c \u0424\u0443\u043d\u043a\u0446\u0438\u044f handle \u0438 exitclient - \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 exit \u0438 \u043f\u0440\u043e\u0449\u0430\u0435\u0442\u0441\u044f \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u0424\u0443\u043d\u043a\u0446\u0438\u044f receive - \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u0438\u043b\u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0424\u0443\u043d\u043a\u0446\u0438\u044f send - \u043f\u043e\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 #server import socket import threading sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('127.0.0.1', 3968)) sock.listen() interlocuteurs = [] usernames = [] def broadcast(message): for sock_int in interlocuteurs: sock_int.send(message) def handle(sock_int): while True: try: message = sock_int.recv(4096) if \"exit\" in message.decode('utf-8'): exitclient(sock_int) break broadcast(message) except Exception as e: exitclient(sock_int) break def exitclient(sock_int): index = interlocuteurs.index(sock_int) interlocuteurs.remove(sock_int) sock_int.close() username = usernames[index] broadcast(f'bye, {username}'.encode('utf-8')) usernames.remove(username) def receive(): while True: try: sock_int, client_address = sock.accept() print(f'connection established {client_address}') sock_int.send('NICKNAME'.encode('utf-8')) username = sock_int.recv(4096).decode('utf-8') interlocuteurs.append(sock_int) usernames.append(username) broadcast(f'{username} joined'.encode('utf-8')) handle_thread = threading.Thread(target=handle, args=(sock_int,)) handle_thread.start() except KeyboardInterrupt: print (\"server closed\") sock.close() break except Exception as e: print('Exception:', e) broadcast(f'') receive() #client import socket import threading username = input(\"your username: \") sock_int = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock_int.connect(('127.0.0.1', 3968)) def receive(): while True: try: message = sock_int.recv(4096).decode('utf-8') if message == 'NICKNAME': sock_int.send(username.encode('utf-8')) elif username in message: print(message.replace(f\"{username} >\", 'You >', 1)) else: print(message) except Exception as e: print(e) sock_int.close() break def send(): while True: message = input() sock_int.send(f'{username} > {message}'.encode('utf-8')) send_thread = threading.Thread(target=send) recv_thread = threading.Thread(target=receive) send_thread.start() recv_thread.start() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket server.py \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0434\u0430\u043b\u0435\u0435 \u0437\u0430\u043f\u0443\u0441\u043a \u043d\u0430 \u0441\u043e\u043a\u0435\u0442\u0435 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043d\u0443\u0436\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u044b insert.html - \u0444\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0438 \u043e\u0446\u0435\u043d\u043e\u043a \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u0427\u0442\u043e\u0431\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0438\u0442\u044c \u0436\u0443\u0440\u043d\u0430\u043b \u043e\u0446\u0435\u043d\u043e\u043a, \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c /journal \u0432 \u0430\u0434\u0440\u0435\u0441\u0435 \u0444\u043e\u0440\u043c\u044b #server.py import socket class MyHTTPServer: # \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u0430 def __init__(self, host, port): self.host = host self.port = port self.grade = [] # 1. \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043d\u0430 \u0441\u043e\u043a\u0435\u0442\u0435, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 def serve_forever(self): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind((self.host, self.port)) sock.listen() while True: client_socket, _ = sock.accept() self.serve_client(client_socket) # 2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f def serve_client(self, client_socket): data = client_socket.recv(4096).decode('utf-8') request = self.parse_request(data) response = self.handle_request(request) if response: client_socket.send(response.encode('utf-8')) client_socket.close() # 3. \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 http+\u0437\u0430\u043f\u0440\u043e\u0441\u0430 def parse_request(self, data): data_split = data.split('\\r\\n') print(f\"data split : {data_split}\") headers = data_split[0].split() print(f\"Headers : {headers}\") body = data_split[-1] request = dict() if len(headers) == 3: request.update( {\"method\": headers[0], \"url\": headers[1], \"version\": headers[2]}) if \"&\" in body: parametre = body.split(\"&\") request.update({\"parametrs\": parametre}) return request else: request.update({\"parametrs\": {}}) return request else: raise Exception(\"Malformed request line\") # 4. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 url \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043d\u0443\u0436\u043d\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u043e\u043c def handle_request(self, request): print(request) response = f\"{request['version']} 200 OK\\n\\n\" if request[\"url\"] == \"/\": if request[\"method\"] == \"POST\": self.grade.extend(request[\"parametrs\"]) if request[\"method\"] == \"GET\" or \"POST\": with open('insert.html') as f: response += f.read() return response if request[\"url\"] == \"/journal\": response += \"<html><head><title>List grades</title></head><body>\" for s in self.grade: response += f\"<p>{s} </p>\" response += \"</body></html>\" return response if __name__ == \"__main__\": host = 'localhost' port = 3968 #name myserver = MyHTTPServer(host, port) try: myserver.serve_forever() except KeyboardInterrupt: pass #insert.py <!DOCTYPE html> <html lang=\"fr\"> <head> <meta charset=\"UTF-8\"> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Document</title> </head> <body> <p>Enter data to fill out the journal: <form action=\"/\" method=\"post\"> <label for=\"subject\">Enter the name of the subject:</label> <input type=\"text\" placeholder=\"subject\" name=\"subject\" id=\"subject\"/> <label for=\"grade\">Enter the mark:</label> <input type=\"number\" placeholder=\"mark\" name=\"grade\" id=\"grade\"/> <button>Send</button> </form> </p> </body> </html>","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"l1/#1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1"},{"location":"l1/#1_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041a\u043b\u0438\u0435\u043d\u0442 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442 \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. DGRAM \u0437\u0430\u0445\u043e\u0434\u0438\u043b \u0432 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u0443\u044e \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e TCP. #server import socket port = 3968 host = socket.gethostbyname(\"localhost\") mess=\"Hello, client\" message = bytes(mess, 'utf-8') sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0) #use TCP #int sock = 1 sock.bind((host, port)) #\u0441\u0432\u044f\u0437\u044c \u0441\u043e\u043a\u0435\u0442\u0430 \u0441 \u0445\u043e\u0441\u0442\u043e\u043c \u0438 \u043f\u043e\u0440\u0442\u043e\u043c sock.listen(10) #n listenings cl_sock, addr = sock.accept() #\u043f\u0440\u0438\u0451\u043c \u0438 \u043f\u043e\u0441\u044b\u043b\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 data = cl_sock.recv(1024) #\u043f\u043e\u0440\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 print(data.decode()) cl_sock.send(message) sock.close() #\u0437\u0430\u043a\u0440\u044b\u043b\u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438 #client import socket port = 3968 host = socket.gethostbyname(\"localhost\") mess=\"Hello, server\" message = bytes(mess, 'utf-8') sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #_stream for tcp dgram udp sock.connect((host, port)) sock.send(message) data = sock.recv(1024) print(data.decode()) sock.close()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"l1/#2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 - \u0420\u0435\u0448\u0438\u0442\u044c \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0435 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435, \u0432\u0432\u043e\u0434\u044f \u0435\u0433\u043e \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u043a\u043e\u0440\u043d\u0438 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f (\u0438\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u0438\u0445 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438) \u0432 \u0432\u0438\u0434\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f import socket from math import sqrt port = 3968 host = socket.gethostbyname(\"localhost\") sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0) #use TCP sock.bind((host, port)) #\u0441\u0432\u044f\u0437\u044c \u0441\u043e\u043a\u0435\u0442\u0430 \u0441 \u0445\u043e\u0441\u0442\u043e\u043c \u0438 \u043f\u043e\u0440\u0442\u043e\u043c sock.listen(10) #n listenings cl_sock, addr = sock.accept() #\u043f\u0440\u0438\u0451\u043c \u0438 \u043f\u043e\u0441\u044b\u043b\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 data=cl_sock.recv(1024) print(data) a, b,c = map(lambda x: int(x), data.split()) #conn.sendall('Wrong input format!\\n'.encode()) D = b**2 - 4 * a * c if D > 0: x1, x2 = (-b + sqrt(D)) / (2 * a), (-b - sqrt(D)) / (2 * a) cl_sock.sendall(f'\u041a\u043e\u0440\u043d\u0438 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f: {x1}, {x2}\\n'.encode()) elif D == 0: x = (-b) / (2 * a) cl_sock.sendall(f'\u041a\u043e\u0440\u0435\u043d\u044c \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f: {x}\\n'.encode()) else: cl_sock.sendall(f'\u041d\u0435\u0442 \u043a\u043e\u0440\u043d\u0435\u0439'.encode()) #message = bytes(mess, 'utf-8') print(data.decode()) sock.close() #\u0437\u0430\u043a\u0440\u044b\u043b\u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 #client import socket port = 3968 host = socket.gethostbyname(\"localhost\") #host=\"127.0.0.1\" sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #_stream for tcp dgram udp sock.connect((host, port)) #data = sock.recv(1024) a=input('Type the first variable x^2 ') b=input('Type the second linear vatiable x ') c=input('Type the third variable ') #sock.send(int.from_bytes([a,b,c],byteorder='big',signed=True)) equation=a +\" \"+ b +\" \"+ c sock.send(equation.encode('utf-8')) #sock.send(a,b,c) data = (sock.recv(1024)).decode('utf-8') print(data) sock.close()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"l1/#3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0432 \u043e\u0442\u0432\u0435\u0442 http-\u0441\u0442\u0440\u0430\u043d\u0446\u0443, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442\u0441\u044f \u0438\u0437 index.html. \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 http://localhost:3968 #server import socket port = 3968 host = socket.gethostbyname(\"localhost\") sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0) sock.bind((host, port)) sock.listen(10) sock, addr = sock.accept() sock.recv(16384) response_type = \"HTTP/1.0 200 OK\\n\" headers = \"Content-Type: text/html\\n\\n\" page = open('index.html','r') body = page.read() resp = response_type + headers + body sock.send(resp.encode(\"utf-8\")) page.close() sock.close() #client import socket port = 3968 host = socket.gethostbyname(\"localhost\") mess=\"Hello, server\" message = bytes(mess, 'utf-8') sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #_stream for tcp dgram udp sock.connect((host, port)) sock.send(message) data = sock.recv(1024) print(data.decode()) sock.close() #index <!DOCTYPE html> <html lang=\"fr\"> <head> <meta charset=\"UTF-8\"> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Document</title> </head> <body> <h1><span style=\"color:rgb(255, 97, 163)\"><b>Mon premier site</b></span></h1> <p>Pour naviguer sur la page veiller cliquer:</p> <ul> <li><a href=\"#inf\">Infos personnelles</a></li> <li><a href=\"#Comp\u00e9tences\">Comp\u00e9tences</a></li> <li><a href=\"#Centre d'inter\u00eats\">Centre d'inter\u00eats</a></li> </ul> <hr> <h2><a name=\"inf\"><span style=\"color:#7B68EE\"><b>Infos personnelles</b></span></a></h2> <hr> <p>Salut! Je m'appelle <span style=\"color:#C71585\">Anne</span>, j'ai 19 ans.</p> <p>Je fais mes \u00e9tudes \u00e0 l'universit\u00e9 de fili\u00e8re technique et j'aime retoucher les photos, surtout des photos des patineurs artistiques.<br></p> <hr> <h2><a name=\"Comp\u00e9tences\"><span style=\"color:#7B68EE\"><b>Comp\u00e9tences</b></span></a></h2> <p><hr>Tu peux aussi me connecter si tu as besoin de: <ul type=\"circle\"> <li>construire <span style=\"color:#C71585\">les sites</span></li> <li>consulter sur <span style=\"color:#C71585\">les devoirs \u00e0 domicile</span></spqn></li> <li>retoucher <span style=\"color:#C71585\">les photos</span></li> </ul> <hr> </p> <h2><a name=\"Centre d'inter\u00eats\"><span style=\"color:#7B68EE\"><b>Centre d'inter\u00eats</b></span></a></h2> <hr> <ul type=\"circle\"> <li>Composition de <span style=\"color:#C71585\">la musique</span></li> <li>Apprentissage <span style=\"color:#C71585\">des langues \u00e9trang\u00e8res</span></li> <li>Application <span style=\"color:#C71585\">d'int\u00e9lligence artificielle \u00e0 la m\u00e9decine</span></li> </ul> <hr>","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"l1/#4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0412 \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u043d\u043e\u0441\u044f\u0442\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u044b: \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u044f\u0441\u044c \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0432\u0432\u0435\u0441\u0442\u0438 \u0438\u043c\u044f, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f. \u0421 \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u044d\u0442\u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u0414\u0430\u043b\u0435\u0435 \u043d\u043e\u0432\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442 \u0442\u0435 \u0436\u0435 \u044d\u0442\u0430\u043f\u044b. \u0424\u0443\u043d\u043a\u0446\u0438\u044f broadcast - \u043f\u043e\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d\u043d\u044b\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c \u0424\u0443\u043d\u043a\u0446\u0438\u044f handle \u0438 exitclient - \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 exit \u0438 \u043f\u0440\u043e\u0449\u0430\u0435\u0442\u0441\u044f \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u0424\u0443\u043d\u043a\u0446\u0438\u044f receive - \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u0438\u043b\u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0424\u0443\u043d\u043a\u0446\u0438\u044f send - \u043f\u043e\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 #server import socket import threading sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('127.0.0.1', 3968)) sock.listen() interlocuteurs = [] usernames = [] def broadcast(message): for sock_int in interlocuteurs: sock_int.send(message) def handle(sock_int): while True: try: message = sock_int.recv(4096) if \"exit\" in message.decode('utf-8'): exitclient(sock_int) break broadcast(message) except Exception as e: exitclient(sock_int) break def exitclient(sock_int): index = interlocuteurs.index(sock_int) interlocuteurs.remove(sock_int) sock_int.close() username = usernames[index] broadcast(f'bye, {username}'.encode('utf-8')) usernames.remove(username) def receive(): while True: try: sock_int, client_address = sock.accept() print(f'connection established {client_address}') sock_int.send('NICKNAME'.encode('utf-8')) username = sock_int.recv(4096).decode('utf-8') interlocuteurs.append(sock_int) usernames.append(username) broadcast(f'{username} joined'.encode('utf-8')) handle_thread = threading.Thread(target=handle, args=(sock_int,)) handle_thread.start() except KeyboardInterrupt: print (\"server closed\") sock.close() break except Exception as e: print('Exception:', e) broadcast(f'') receive() #client import socket import threading username = input(\"your username: \") sock_int = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock_int.connect(('127.0.0.1', 3968)) def receive(): while True: try: message = sock_int.recv(4096).decode('utf-8') if message == 'NICKNAME': sock_int.send(username.encode('utf-8')) elif username in message: print(message.replace(f\"{username} >\", 'You >', 1)) else: print(message) except Exception as e: print(e) sock_int.close() break def send(): while True: message = input() sock_int.send(f'{username} > {message}'.encode('utf-8')) send_thread = threading.Thread(target=send) recv_thread = threading.Thread(target=receive) send_thread.start() recv_thread.start()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"l1/#5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket server.py \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0434\u0430\u043b\u0435\u0435 \u0437\u0430\u043f\u0443\u0441\u043a \u043d\u0430 \u0441\u043e\u043a\u0435\u0442\u0435 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043d\u0443\u0436\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u044b insert.html - \u0444\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0438 \u043e\u0446\u0435\u043d\u043e\u043a \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u0427\u0442\u043e\u0431\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0438\u0442\u044c \u0436\u0443\u0440\u043d\u0430\u043b \u043e\u0446\u0435\u043d\u043e\u043a, \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c /journal \u0432 \u0430\u0434\u0440\u0435\u0441\u0435 \u0444\u043e\u0440\u043c\u044b #server.py import socket class MyHTTPServer: # \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u0430 def __init__(self, host, port): self.host = host self.port = port self.grade = [] # 1. \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043d\u0430 \u0441\u043e\u043a\u0435\u0442\u0435, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 def serve_forever(self): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind((self.host, self.port)) sock.listen() while True: client_socket, _ = sock.accept() self.serve_client(client_socket) # 2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f def serve_client(self, client_socket): data = client_socket.recv(4096).decode('utf-8') request = self.parse_request(data) response = self.handle_request(request) if response: client_socket.send(response.encode('utf-8')) client_socket.close() # 3. \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 http+\u0437\u0430\u043f\u0440\u043e\u0441\u0430 def parse_request(self, data): data_split = data.split('\\r\\n') print(f\"data split : {data_split}\") headers = data_split[0].split() print(f\"Headers : {headers}\") body = data_split[-1] request = dict() if len(headers) == 3: request.update( {\"method\": headers[0], \"url\": headers[1], \"version\": headers[2]}) if \"&\" in body: parametre = body.split(\"&\") request.update({\"parametrs\": parametre}) return request else: request.update({\"parametrs\": {}}) return request else: raise Exception(\"Malformed request line\") # 4. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 url \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043d\u0443\u0436\u043d\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u043e\u043c def handle_request(self, request): print(request) response = f\"{request['version']} 200 OK\\n\\n\" if request[\"url\"] == \"/\": if request[\"method\"] == \"POST\": self.grade.extend(request[\"parametrs\"]) if request[\"method\"] == \"GET\" or \"POST\": with open('insert.html') as f: response += f.read() return response if request[\"url\"] == \"/journal\": response += \"<html><head><title>List grades</title></head><body>\" for s in self.grade: response += f\"<p>{s} </p>\" response += \"</body></html>\" return response if __name__ == \"__main__\": host = 'localhost' port = 3968 #name myserver = MyHTTPServer(host, port) try: myserver.serve_forever() except KeyboardInterrupt: pass #insert.py <!DOCTYPE html> <html lang=\"fr\"> <head> <meta charset=\"UTF-8\"> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Document</title> </head> <body> <p>Enter data to fill out the journal: <form action=\"/\" method=\"post\"> <label for=\"subject\">Enter the name of the subject:</label> <input type=\"text\" placeholder=\"subject\" name=\"subject\" id=\"subject\"/> <label for=\"grade\">Enter the mark:</label> <input type=\"number\" placeholder=\"mark\" name=\"grade\" id=\"grade\"/> <button>Send</button> </form> </p> </body> </html>","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"}]}