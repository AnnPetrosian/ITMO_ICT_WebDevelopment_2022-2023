{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web 2022 \u0410\u043d\u043d\u0430 \u041f\u0435\u0442\u0440\u043e\u0441\u044f\u043d K33422","title":"\u0417\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e"},{"location":"#web-2022","text":"","title":"Web 2022"},{"location":"#k33422","text":"","title":"\u0410\u043d\u043d\u0430 \u041f\u0435\u0442\u0440\u043e\u0441\u044f\u043d K33422"},{"location":"l1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041a\u043b\u0438\u0435\u043d\u0442 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442 \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. DGRAM \u0437\u0430\u0445\u043e\u0434\u0438\u043b \u0432 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u0443\u044e \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e TCP. #server import socket port = 3968 host = socket.gethostbyname(\"localhost\") mess=\"Hello, client\" message = bytes(mess, 'utf-8') sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0) #use TCP #int sock = 1 sock.bind((host, port)) #\u0441\u0432\u044f\u0437\u044c \u0441\u043e\u043a\u0435\u0442\u0430 \u0441 \u0445\u043e\u0441\u0442\u043e\u043c \u0438 \u043f\u043e\u0440\u0442\u043e\u043c sock.listen(10) #n listenings cl_sock, addr = sock.accept() #\u043f\u0440\u0438\u0451\u043c \u0438 \u043f\u043e\u0441\u044b\u043b\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 data = cl_sock.recv(1024) #\u043f\u043e\u0440\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 print(data.decode()) cl_sock.send(message) sock.close() #\u0437\u0430\u043a\u0440\u044b\u043b\u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438 #client import socket port = 3968 host = socket.gethostbyname(\"localhost\") mess=\"Hello, server\" message = bytes(mess, 'utf-8') sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #_stream for tcp dgram udp sock.connect((host, port)) sock.send(message) data = sock.recv(1024) print(data.decode()) sock.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 - \u0420\u0435\u0448\u0438\u0442\u044c \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0435 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435, \u0432\u0432\u043e\u0434\u044f \u0435\u0433\u043e \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u043a\u043e\u0440\u043d\u0438 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f (\u0438\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u0438\u0445 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438) \u0432 \u0432\u0438\u0434\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f import socket from math import sqrt port = 3968 host = socket.gethostbyname(\"localhost\") sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0) #use TCP sock.bind((host, port)) #\u0441\u0432\u044f\u0437\u044c \u0441\u043e\u043a\u0435\u0442\u0430 \u0441 \u0445\u043e\u0441\u0442\u043e\u043c \u0438 \u043f\u043e\u0440\u0442\u043e\u043c sock.listen(10) #n listenings cl_sock, addr = sock.accept() #\u043f\u0440\u0438\u0451\u043c \u0438 \u043f\u043e\u0441\u044b\u043b\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 data=cl_sock.recv(1024) print(data) a, b,c = map(lambda x: int(x), data.split()) #conn.sendall('Wrong input format!\\n'.encode()) D = b**2 - 4 * a * c if D > 0: x1, x2 = (-b + sqrt(D)) / (2 * a), (-b - sqrt(D)) / (2 * a) cl_sock.sendall(f'\u041a\u043e\u0440\u043d\u0438 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f: {x1}, {x2}\\n'.encode()) elif D == 0: x = (-b) / (2 * a) cl_sock.sendall(f'\u041a\u043e\u0440\u0435\u043d\u044c \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f: {x}\\n'.encode()) else: cl_sock.sendall(f'\u041d\u0435\u0442 \u043a\u043e\u0440\u043d\u0435\u0439'.encode()) #message = bytes(mess, 'utf-8') print(data.decode()) sock.close() #\u0437\u0430\u043a\u0440\u044b\u043b\u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 #client import socket port = 3968 host = socket.gethostbyname(\"localhost\") #host=\"127.0.0.1\" sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #_stream for tcp dgram udp sock.connect((host, port)) #data = sock.recv(1024) a=input('Type the first variable x^2 ') b=input('Type the second linear vatiable x ') c=input('Type the third variable ') #sock.send(int.from_bytes([a,b,c],byteorder='big',signed=True)) equation=a +\" \"+ b +\" \"+ c sock.send(equation.encode('utf-8')) #sock.send(a,b,c) data = (sock.recv(1024)).decode('utf-8') print(data) sock.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0432 \u043e\u0442\u0432\u0435\u0442 http-\u0441\u0442\u0440\u0430\u043d\u0446\u0443, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442\u0441\u044f \u0438\u0437 index.html. \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 http://localhost:3968 #server import socket port = 3968 host = socket.gethostbyname(\"localhost\") sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0) sock.bind((host, port)) sock.listen(10) sock, addr = sock.accept() sock.recv(16384) response_type = \"HTTP/1.0 200 OK\\n\" headers = \"Content-Type: text/html\\n\\n\" page = open('index.html','r') body = page.read() resp = response_type + headers + body sock.send(resp.encode(\"utf-8\")) page.close() sock.close() #client import socket port = 3968 host = socket.gethostbyname(\"localhost\") mess=\"Hello, server\" message = bytes(mess, 'utf-8') sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #_stream for tcp dgram udp sock.connect((host, port)) sock.send(message) data = sock.recv(1024) print(data.decode()) sock.close() #index <!DOCTYPE html> <html lang=\"fr\"> <head> <meta charset=\"UTF-8\"> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Document</title> </head> <body> <h1><span style=\"color:rgb(255, 97, 163)\"><b>Mon premier site</b></span></h1> <p>Pour naviguer sur la page veiller cliquer:</p> <ul> <li><a href=\"#inf\">Infos personnelles</a></li> <li><a href=\"#Comp\u00e9tences\">Comp\u00e9tences</a></li> <li><a href=\"#Centre d'inter\u00eats\">Centre d'inter\u00eats</a></li> </ul> <hr> <h2><a name=\"inf\"><span style=\"color:#7B68EE\"><b>Infos personnelles</b></span></a></h2> <hr> <p>Salut! Je m'appelle <span style=\"color:#C71585\">Anne</span>, j'ai 19 ans.</p> <p>Je fais mes \u00e9tudes \u00e0 l'universit\u00e9 de fili\u00e8re technique et j'aime retoucher les photos, surtout des photos des patineurs artistiques.<br></p> <hr> <h2><a name=\"Comp\u00e9tences\"><span style=\"color:#7B68EE\"><b>Comp\u00e9tences</b></span></a></h2> <p><hr>Tu peux aussi me connecter si tu as besoin de: <ul type=\"circle\"> <li>construire <span style=\"color:#C71585\">les sites</span></li> <li>consulter sur <span style=\"color:#C71585\">les devoirs \u00e0 domicile</span></spqn></li> <li>retoucher <span style=\"color:#C71585\">les photos</span></li> </ul> <hr> </p> <h2><a name=\"Centre d'inter\u00eats\"><span style=\"color:#7B68EE\"><b>Centre d'inter\u00eats</b></span></a></h2> <hr> <ul type=\"circle\"> <li>Composition de <span style=\"color:#C71585\">la musique</span></li> <li>Apprentissage <span style=\"color:#C71585\">des langues \u00e9trang\u00e8res</span></li> <li>Application <span style=\"color:#C71585\">d'int\u00e9lligence artificielle \u00e0 la m\u00e9decine</span></li> </ul> <hr> \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0412 \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u043d\u043e\u0441\u044f\u0442\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u044b: \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u044f\u0441\u044c \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0432\u0432\u0435\u0441\u0442\u0438 \u0438\u043c\u044f, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f. \u0421 \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u044d\u0442\u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u0414\u0430\u043b\u0435\u0435 \u043d\u043e\u0432\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442 \u0442\u0435 \u0436\u0435 \u044d\u0442\u0430\u043f\u044b. \u0424\u0443\u043d\u043a\u0446\u0438\u044f broadcast - \u043f\u043e\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d\u043d\u044b\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c \u0424\u0443\u043d\u043a\u0446\u0438\u044f handle \u0438 exitclient - \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 exit \u0438 \u043f\u0440\u043e\u0449\u0430\u0435\u0442\u0441\u044f \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u0424\u0443\u043d\u043a\u0446\u0438\u044f receive - \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u0438\u043b\u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0424\u0443\u043d\u043a\u0446\u0438\u044f send - \u043f\u043e\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 #server import socket import threading sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('127.0.0.1', 3968)) sock.listen() interlocuteurs = [] usernames = [] def broadcast(message): for sock_int in interlocuteurs: sock_int.send(message) def handle(sock_int): while True: try: message = sock_int.recv(4096) if \"exit\" in message.decode('utf-8'): exitclient(sock_int) break broadcast(message) except Exception as e: exitclient(sock_int) break def exitclient(sock_int): index = interlocuteurs.index(sock_int) interlocuteurs.remove(sock_int) sock_int.close() username = usernames[index] broadcast(f'bye, {username}'.encode('utf-8')) usernames.remove(username) def receive(): while True: try: sock_int, client_address = sock.accept() print(f'connection established {client_address}') sock_int.send('NICKNAME'.encode('utf-8')) username = sock_int.recv(4096).decode('utf-8') interlocuteurs.append(sock_int) usernames.append(username) broadcast(f'{username} joined'.encode('utf-8')) handle_thread = threading.Thread(target=handle, args=(sock_int,)) handle_thread.start() except KeyboardInterrupt: print (\"server closed\") sock.close() break except Exception as e: print('Exception:', e) broadcast(f'') receive() #client import socket import threading username = input(\"your username: \") sock_int = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock_int.connect(('127.0.0.1', 3968)) def receive(): while True: try: message = sock_int.recv(4096).decode('utf-8') if message == 'NICKNAME': sock_int.send(username.encode('utf-8')) elif username in message: print(message.replace(f\"{username} >\", 'You >', 1)) else: print(message) except Exception as e: print(e) sock_int.close() break def send(): while True: message = input() sock_int.send(f'{username} > {message}'.encode('utf-8')) send_thread = threading.Thread(target=send) recv_thread = threading.Thread(target=receive) send_thread.start() recv_thread.start() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket server.py \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0434\u0430\u043b\u0435\u0435 \u0437\u0430\u043f\u0443\u0441\u043a \u043d\u0430 \u0441\u043e\u043a\u0435\u0442\u0435 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043d\u0443\u0436\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u044b insert.html - \u0444\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0438 \u043e\u0446\u0435\u043d\u043e\u043a \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u0427\u0442\u043e\u0431\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0438\u0442\u044c \u0436\u0443\u0440\u043d\u0430\u043b \u043e\u0446\u0435\u043d\u043e\u043a, \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c /journal \u0432 \u0430\u0434\u0440\u0435\u0441\u0435 \u0444\u043e\u0440\u043c\u044b #server.py import socket class MyHTTPServer: # \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u0430 def __init__(self, host, port): self.host = host self.port = port self.grade = [] # 1. \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043d\u0430 \u0441\u043e\u043a\u0435\u0442\u0435, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 def serve_forever(self): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind((self.host, self.port)) sock.listen() while True: client_socket, _ = sock.accept() self.serve_client(client_socket) # 2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f def serve_client(self, client_socket): data = client_socket.recv(4096).decode('utf-8') request = self.parse_request(data) response = self.handle_request(request) if response: client_socket.send(response.encode('utf-8')) client_socket.close() # 3. \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 http+\u0437\u0430\u043f\u0440\u043e\u0441\u0430 def parse_request(self, data): data_split = data.split('\\r\\n') print(f\"data split : {data_split}\") headers = data_split[0].split() print(f\"Headers : {headers}\") body = data_split[-1] request = dict() if len(headers) == 3: request.update( {\"method\": headers[0], \"url\": headers[1], \"version\": headers[2]}) if \"&\" in body: parametre = body.split(\"&\") request.update({\"parametrs\": parametre}) return request else: request.update({\"parametrs\": {}}) return request else: raise Exception(\"Malformed request line\") # 4. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 url \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043d\u0443\u0436\u043d\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u043e\u043c def handle_request(self, request): print(request) response = f\"{request['version']} 200 OK\\n\\n\" if request[\"url\"] == \"/\": if request[\"method\"] == \"POST\": self.grade.extend(request[\"parametrs\"]) if request[\"method\"] == \"GET\" or \"POST\": with open('insert.html') as f: response += f.read() return response if request[\"url\"] == \"/journal\": response += \"<html><head><title>List grades</title></head><body>\" for s in self.grade: response += f\"<p>{s} </p>\" response += \"</body></html>\" return response if __name__ == \"__main__\": host = 'localhost' port = 3968 #name myserver = MyHTTPServer(host, port) try: myserver.serve_forever() except KeyboardInterrupt: pass #insert.py <!DOCTYPE html> <html lang=\"fr\"> <head> <meta charset=\"UTF-8\"> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Document</title> </head> <body> <p>Enter data to fill out the journal: <form action=\"/\" method=\"post\"> <label for=\"subject\">Enter the name of the subject:</label> <input type=\"text\" placeholder=\"subject\" name=\"subject\" id=\"subject\"/> <label for=\"grade\">Enter the mark:</label> <input type=\"number\" placeholder=\"mark\" name=\"grade\" id=\"grade\"/> <button>Send</button> </form> </p> </body> </html>","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"l1/#1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1"},{"location":"l1/#1_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041a\u043b\u0438\u0435\u043d\u0442 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442 \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. DGRAM \u0437\u0430\u0445\u043e\u0434\u0438\u043b \u0432 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u0443\u044e \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e TCP. #server import socket port = 3968 host = socket.gethostbyname(\"localhost\") mess=\"Hello, client\" message = bytes(mess, 'utf-8') sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0) #use TCP #int sock = 1 sock.bind((host, port)) #\u0441\u0432\u044f\u0437\u044c \u0441\u043e\u043a\u0435\u0442\u0430 \u0441 \u0445\u043e\u0441\u0442\u043e\u043c \u0438 \u043f\u043e\u0440\u0442\u043e\u043c sock.listen(10) #n listenings cl_sock, addr = sock.accept() #\u043f\u0440\u0438\u0451\u043c \u0438 \u043f\u043e\u0441\u044b\u043b\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 data = cl_sock.recv(1024) #\u043f\u043e\u0440\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 print(data.decode()) cl_sock.send(message) sock.close() #\u0437\u0430\u043a\u0440\u044b\u043b\u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438 #client import socket port = 3968 host = socket.gethostbyname(\"localhost\") mess=\"Hello, server\" message = bytes(mess, 'utf-8') sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #_stream for tcp dgram udp sock.connect((host, port)) sock.send(message) data = sock.recv(1024) print(data.decode()) sock.close()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"l1/#2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 - \u0420\u0435\u0448\u0438\u0442\u044c \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0435 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435, \u0432\u0432\u043e\u0434\u044f \u0435\u0433\u043e \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u043a\u043e\u0440\u043d\u0438 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f (\u0438\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u0438\u0445 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438) \u0432 \u0432\u0438\u0434\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f import socket from math import sqrt port = 3968 host = socket.gethostbyname(\"localhost\") sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0) #use TCP sock.bind((host, port)) #\u0441\u0432\u044f\u0437\u044c \u0441\u043e\u043a\u0435\u0442\u0430 \u0441 \u0445\u043e\u0441\u0442\u043e\u043c \u0438 \u043f\u043e\u0440\u0442\u043e\u043c sock.listen(10) #n listenings cl_sock, addr = sock.accept() #\u043f\u0440\u0438\u0451\u043c \u0438 \u043f\u043e\u0441\u044b\u043b\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 data=cl_sock.recv(1024) print(data) a, b,c = map(lambda x: int(x), data.split()) #conn.sendall('Wrong input format!\\n'.encode()) D = b**2 - 4 * a * c if D > 0: x1, x2 = (-b + sqrt(D)) / (2 * a), (-b - sqrt(D)) / (2 * a) cl_sock.sendall(f'\u041a\u043e\u0440\u043d\u0438 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f: {x1}, {x2}\\n'.encode()) elif D == 0: x = (-b) / (2 * a) cl_sock.sendall(f'\u041a\u043e\u0440\u0435\u043d\u044c \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f: {x}\\n'.encode()) else: cl_sock.sendall(f'\u041d\u0435\u0442 \u043a\u043e\u0440\u043d\u0435\u0439'.encode()) #message = bytes(mess, 'utf-8') print(data.decode()) sock.close() #\u0437\u0430\u043a\u0440\u044b\u043b\u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 #client import socket port = 3968 host = socket.gethostbyname(\"localhost\") #host=\"127.0.0.1\" sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #_stream for tcp dgram udp sock.connect((host, port)) #data = sock.recv(1024) a=input('Type the first variable x^2 ') b=input('Type the second linear vatiable x ') c=input('Type the third variable ') #sock.send(int.from_bytes([a,b,c],byteorder='big',signed=True)) equation=a +\" \"+ b +\" \"+ c sock.send(equation.encode('utf-8')) #sock.send(a,b,c) data = (sock.recv(1024)).decode('utf-8') print(data) sock.close()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"l1/#3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0432 \u043e\u0442\u0432\u0435\u0442 http-\u0441\u0442\u0440\u0430\u043d\u0446\u0443, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442\u0441\u044f \u0438\u0437 index.html. \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 http://localhost:3968 #server import socket port = 3968 host = socket.gethostbyname(\"localhost\") sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0) sock.bind((host, port)) sock.listen(10) sock, addr = sock.accept() sock.recv(16384) response_type = \"HTTP/1.0 200 OK\\n\" headers = \"Content-Type: text/html\\n\\n\" page = open('index.html','r') body = page.read() resp = response_type + headers + body sock.send(resp.encode(\"utf-8\")) page.close() sock.close() #client import socket port = 3968 host = socket.gethostbyname(\"localhost\") mess=\"Hello, server\" message = bytes(mess, 'utf-8') sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #_stream for tcp dgram udp sock.connect((host, port)) sock.send(message) data = sock.recv(1024) print(data.decode()) sock.close() #index <!DOCTYPE html> <html lang=\"fr\"> <head> <meta charset=\"UTF-8\"> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Document</title> </head> <body> <h1><span style=\"color:rgb(255, 97, 163)\"><b>Mon premier site</b></span></h1> <p>Pour naviguer sur la page veiller cliquer:</p> <ul> <li><a href=\"#inf\">Infos personnelles</a></li> <li><a href=\"#Comp\u00e9tences\">Comp\u00e9tences</a></li> <li><a href=\"#Centre d'inter\u00eats\">Centre d'inter\u00eats</a></li> </ul> <hr> <h2><a name=\"inf\"><span style=\"color:#7B68EE\"><b>Infos personnelles</b></span></a></h2> <hr> <p>Salut! Je m'appelle <span style=\"color:#C71585\">Anne</span>, j'ai 19 ans.</p> <p>Je fais mes \u00e9tudes \u00e0 l'universit\u00e9 de fili\u00e8re technique et j'aime retoucher les photos, surtout des photos des patineurs artistiques.<br></p> <hr> <h2><a name=\"Comp\u00e9tences\"><span style=\"color:#7B68EE\"><b>Comp\u00e9tences</b></span></a></h2> <p><hr>Tu peux aussi me connecter si tu as besoin de: <ul type=\"circle\"> <li>construire <span style=\"color:#C71585\">les sites</span></li> <li>consulter sur <span style=\"color:#C71585\">les devoirs \u00e0 domicile</span></spqn></li> <li>retoucher <span style=\"color:#C71585\">les photos</span></li> </ul> <hr> </p> <h2><a name=\"Centre d'inter\u00eats\"><span style=\"color:#7B68EE\"><b>Centre d'inter\u00eats</b></span></a></h2> <hr> <ul type=\"circle\"> <li>Composition de <span style=\"color:#C71585\">la musique</span></li> <li>Apprentissage <span style=\"color:#C71585\">des langues \u00e9trang\u00e8res</span></li> <li>Application <span style=\"color:#C71585\">d'int\u00e9lligence artificielle \u00e0 la m\u00e9decine</span></li> </ul> <hr>","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"l1/#4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0412 \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u043d\u043e\u0441\u044f\u0442\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u044b: \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u044f\u0441\u044c \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0432\u0432\u0435\u0441\u0442\u0438 \u0438\u043c\u044f, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f. \u0421 \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u044d\u0442\u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u0414\u0430\u043b\u0435\u0435 \u043d\u043e\u0432\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442 \u0442\u0435 \u0436\u0435 \u044d\u0442\u0430\u043f\u044b. \u0424\u0443\u043d\u043a\u0446\u0438\u044f broadcast - \u043f\u043e\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d\u043d\u044b\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c \u0424\u0443\u043d\u043a\u0446\u0438\u044f handle \u0438 exitclient - \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 exit \u0438 \u043f\u0440\u043e\u0449\u0430\u0435\u0442\u0441\u044f \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u0424\u0443\u043d\u043a\u0446\u0438\u044f receive - \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u0438\u043b\u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0424\u0443\u043d\u043a\u0446\u0438\u044f send - \u043f\u043e\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 #server import socket import threading sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('127.0.0.1', 3968)) sock.listen() interlocuteurs = [] usernames = [] def broadcast(message): for sock_int in interlocuteurs: sock_int.send(message) def handle(sock_int): while True: try: message = sock_int.recv(4096) if \"exit\" in message.decode('utf-8'): exitclient(sock_int) break broadcast(message) except Exception as e: exitclient(sock_int) break def exitclient(sock_int): index = interlocuteurs.index(sock_int) interlocuteurs.remove(sock_int) sock_int.close() username = usernames[index] broadcast(f'bye, {username}'.encode('utf-8')) usernames.remove(username) def receive(): while True: try: sock_int, client_address = sock.accept() print(f'connection established {client_address}') sock_int.send('NICKNAME'.encode('utf-8')) username = sock_int.recv(4096).decode('utf-8') interlocuteurs.append(sock_int) usernames.append(username) broadcast(f'{username} joined'.encode('utf-8')) handle_thread = threading.Thread(target=handle, args=(sock_int,)) handle_thread.start() except KeyboardInterrupt: print (\"server closed\") sock.close() break except Exception as e: print('Exception:', e) broadcast(f'') receive() #client import socket import threading username = input(\"your username: \") sock_int = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock_int.connect(('127.0.0.1', 3968)) def receive(): while True: try: message = sock_int.recv(4096).decode('utf-8') if message == 'NICKNAME': sock_int.send(username.encode('utf-8')) elif username in message: print(message.replace(f\"{username} >\", 'You >', 1)) else: print(message) except Exception as e: print(e) sock_int.close() break def send(): while True: message = input() sock_int.send(f'{username} > {message}'.encode('utf-8')) send_thread = threading.Thread(target=send) recv_thread = threading.Thread(target=receive) send_thread.start() recv_thread.start()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"l1/#5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket server.py \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0434\u0430\u043b\u0435\u0435 \u0437\u0430\u043f\u0443\u0441\u043a \u043d\u0430 \u0441\u043e\u043a\u0435\u0442\u0435 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043d\u0443\u0436\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u044b insert.html - \u0444\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0438 \u043e\u0446\u0435\u043d\u043e\u043a \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u0427\u0442\u043e\u0431\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0438\u0442\u044c \u0436\u0443\u0440\u043d\u0430\u043b \u043e\u0446\u0435\u043d\u043e\u043a, \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c /journal \u0432 \u0430\u0434\u0440\u0435\u0441\u0435 \u0444\u043e\u0440\u043c\u044b #server.py import socket class MyHTTPServer: # \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u0430 def __init__(self, host, port): self.host = host self.port = port self.grade = [] # 1. \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043d\u0430 \u0441\u043e\u043a\u0435\u0442\u0435, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 def serve_forever(self): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind((self.host, self.port)) sock.listen() while True: client_socket, _ = sock.accept() self.serve_client(client_socket) # 2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f def serve_client(self, client_socket): data = client_socket.recv(4096).decode('utf-8') request = self.parse_request(data) response = self.handle_request(request) if response: client_socket.send(response.encode('utf-8')) client_socket.close() # 3. \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 http+\u0437\u0430\u043f\u0440\u043e\u0441\u0430 def parse_request(self, data): data_split = data.split('\\r\\n') print(f\"data split : {data_split}\") headers = data_split[0].split() print(f\"Headers : {headers}\") body = data_split[-1] request = dict() if len(headers) == 3: request.update( {\"method\": headers[0], \"url\": headers[1], \"version\": headers[2]}) if \"&\" in body: parametre = body.split(\"&\") request.update({\"parametrs\": parametre}) return request else: request.update({\"parametrs\": {}}) return request else: raise Exception(\"Malformed request line\") # 4. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 url \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043d\u0443\u0436\u043d\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u043e\u043c def handle_request(self, request): print(request) response = f\"{request['version']} 200 OK\\n\\n\" if request[\"url\"] == \"/\": if request[\"method\"] == \"POST\": self.grade.extend(request[\"parametrs\"]) if request[\"method\"] == \"GET\" or \"POST\": with open('insert.html') as f: response += f.read() return response if request[\"url\"] == \"/journal\": response += \"<html><head><title>List grades</title></head><body>\" for s in self.grade: response += f\"<p>{s} </p>\" response += \"</body></html>\" return response if __name__ == \"__main__\": host = 'localhost' port = 3968 #name myserver = MyHTTPServer(host, port) try: myserver.serve_forever() except KeyboardInterrupt: pass #insert.py <!DOCTYPE html> <html lang=\"fr\"> <head> <meta charset=\"UTF-8\"> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Document</title> </head> <body> <p>Enter data to fill out the journal: <form action=\"/\" method=\"post\"> <label for=\"subject\">Enter the name of the subject:</label> <input type=\"text\" placeholder=\"subject\" name=\"subject\" id=\"subject\"/> <label for=\"grade\">Enter the mark:</label> <input type=\"number\" placeholder=\"mark\" name=\"grade\" id=\"grade\"/> <button>Send</button> </form> </p> </body> </html>","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"},{"location":"l2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2 github - \u043f\u0443\u043b\u043b-\u0440\u0435\u043a\u0432\u0435\u0441\u0442 version_1 - \u0441\u043a\u0440\u0438\u043d\u043a\u0430\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0435\u0440\u0432\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 version_2 - \u0441\u043a\u0440\u0438\u043d\u043a\u0430\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u041f\u0420\u0418\u041b\u0418\u0427\u041d\u041e\u0419 \u0432\u0435\u0440\u0441\u0438\u0438 \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0432 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u043c \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0438, \u0434\u043e\u0441\u0443\u0442\u043f \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 http://127.0.0.1:8000/ models.py - \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 from django.db import models from datetime import date from django.contrib.auth.models import AbstractUser # Create your models here. class Owner(AbstractUser): owner_id = models.IntegerField(primary_key=True) date_of_birth = models.DateField(null=True) passport = models.CharField(max_length=15, blank=False, null=False, unique=True) address = models.CharField(max_length=100, blank=False, null=False) nationality = models.CharField(max_length=30, blank=True, null=False) class Car(models.Model): id_number = models.IntegerField(primary_key=True) brand = models.CharField(max_length=30) car_model = models.CharField(max_length=30) color = models.CharField(max_length=30) official_number = models.CharField(max_length=30) class Owning(models.Model): owner = models.ForeignKey(Owner, on_delete=models.CASCADE) car = models.ForeignKey(Car, on_delete=models.CASCADE) begin_date = models.DateField(default=date(2010, 1, 1)) end_date = models.DateField(default=date(2020, 1, 1)) class DrivingLicense(models.Model): LICENCE_TYPES = ( ('A', 'Motorcycles'), ('B', 'Cars'), ('D', 'Buses'), ) number = models.IntegerField(primary_key=True) owner = models.ForeignKey(Owner, on_delete=models.CASCADE) date_of_issue = models.DateField(default=date(2010, 1, 1)) type = models.CharField(max_length=3, choices=LICENCE_TYPES) \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0444\u043e\u0440\u043c\u044b \u0434\u043b\u044f \u043c\u0430\u043d\u0438\u043f\u0443\u043b\u044f\u0446\u0438\u0439 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0443\u0442\u044c \u043a \u043f\u0430\u043f\u043a\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u043d\u0438 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f: TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [BASE_DIR / 'templates'], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] \u0414\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439: AUTH_USER_MODEL = 'project_first_app.Owner' \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, owners.html \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 <!DOCTYPE html> Owners <style> table { border-spacing: 20px 10px; font-weight: bold; } </style> </head> <body> {% if new %} <form method=\"POST\" enctype=\"multipart/form-data\"> {% csrf_token %} {{ form.as_p }} <input type=\"submit\" value=\"Submit\"> </form> {% else %} <table> <thead> <tr> <th>Name</th> <th>Surname</th> <th>Date of birth</th> <th>Passport</th> <th>Address</th> <th>Nationality</th> </tr> </thead> <tbody> {% if all %} {% for owner in owners %} <tr> <th>{{ owner.first_name }}</th> <th>{{ owner.last_name }}</th> <th>{{ owner.date_of_birth }}</th> <th>{{ owner.passport }}</th> <th>{{ owner.address }}</th> <th>{{ owner.nationality }}</th> </tr> {% endfor %} {% endif %} {% if one %} <tr> <th>{{ owner.first_name }}</th> <th>{{ owner.last_name }}</th> <th>{{ owner.date_of_birth }}</th> <th>{{ owner.passport }}</th> <th>{{ owner.address }}</th> <th>{{ owner.nationality }}</th> </tr> {% endif %} </tbody> </table> {% endif %} <a href=\"../create_owner\">New</a> </body> </html> \u041f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432: \u041f\u0440\u043e\u0435\u043a\u0442 - urls.py: urlpatterns = [ path('admin/', admin.site.urls), path('app/', include('project_first_app.urls')), ] \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 - urls.py: urlpatterns = [ path('owners/', views.all_owners_detail), path('owner/<int:owner_id>/', views.owner_detail), path('create_owner/', views.create_owner), path('cars/', AllCars.as_view()), path('car/<int:pk>/', OneCar.as_view()), path('car/<int:pk>/update/', CarUpdate.as_view()), path('car/create/', CarCreate.as_view()), path('car/<int:pk>/delete/', CarDelete.as_view()), ] views.py - \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u044b from django.shortcuts import render , get_object_or_404, redirect from django.views.generic import ListView, DetailView, UpdateView, CreateView, DeleteView from project_first_app.form import OwnerForm from .models import Owner, Car def all_owners_detail(request): context = {\"owners\": Owner.objects.all(), \"all\": True} return render(request, 'owners.html', context) def owner_detail(request, owner_id): context = get_object_or_404(Owner, pk=owner_id) return render(request, 'owners.html', {\"owner\": context, \"one\": True}) def create_owner(request): form = OwnerForm(request.POST or None) if form.is_valid(): form.save() return redirect('/owners') return render(request, \"owners.html\", {\"form\": form, \"new\": True}) class AllCars(ListView): model = Car template_name = \"cars.html\" class OneCar(DetailView): model = Car template_name = \"cars.html\" class CarDelete(DeleteView): model = Car template_name = 'car_confirm_delete.html' success_url = '/cars/' class CarCreate(CreateView): model = Car template_name = 'car_create_update.html' fields = ['id_number', 'brand', 'car_model', 'color', 'official_number'] success_url = '/cars/ class CarUpdate(UpdateView): model = Car fields = ['id_number', 'brand', 'car_model', 'color', 'official_number'] success_url = '/cars/' template_name = 'car_create_update.html' \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 - \u0414\u043e\u0441\u043a\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 (\u0412\u0430\u0440\u0438\u0430\u043d\u0442 2) \u041e \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043f\u0440\u0435\u0434\u043c\u0435\u0442, \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c, \u0434\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438, \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0448\u0442\u0440\u0430\u0444\u0430\u0445. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. - \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043f\u043e \u0432\u0441\u0435\u043c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c (\u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f). - \u0421\u0434\u0430\u0447\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c \u0432\u0438\u0434\u0435. - \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 (\u0443\u0447\u0438\u0442\u0435\u043b\u044c) \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u0437\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. - \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430. \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0442\u0440\u0438 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 - \u0443\u0447\u0435\u043d\u0438\u043a (class Student), \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435(class Homework) \u0438 \u0435\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435(class Assignment). \u0422\u0430\u043a \u043a\u0430\u043a \u0443\u0447\u0438\u0442\u0435\u043b\u044c \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0432 \u0440\u043e\u043b\u0438 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430, \u0442\u043e \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u0435 \u0431\u0443\u0434\u0435\u043c. models.py from django.db import models from django.contrib.auth.models import User, AbstractUser from django.dispatch import receiver class Homework(models.Model): homework_id = models.IntegerField(blank=False, primary_key=True) name = models.CharField(max_length=100, blank=False) task = models.CharField(max_length=300) subject = models.CharField(max_length=30, blank=False) begin_date = models.DateField(blank=False) deadline = models.DateField(blank=False) penalty = models.CharField(max_length=100) teacher = models.CharField(max_length=30, blank=False) students = models.ManyToManyField('Student', through='Assignment') def __str__(self): return self.name class Student(AbstractUser): first_name = models.CharField(max_length=30) last_name = models.CharField(max_length=30) REQUIRED_FIELDS = ['first_name', 'last_name'] def __str__(self): return f'{self.first_name} {self.last_name}' class Assignment(models.Model): assignment_id = models.IntegerField(blank=False, primary_key=True) student = models.ForeignKey('Student', on_delete=models.CASCADE) homework = models.ForeignKey('Homework', on_delete=models.CASCADE) grade = models.CharField(default='-', max_length=5, blank=True) submission = models.CharField(max_length=300, blank=True) def __str__(self): return f'{self.student.first_name} {self.student.last_name}:\\ {self.homework.name}\\ | {\"graded\" if self.grade != \"-\" else \"submitted\" if len(self.submission) else \"in process\"}' @receiver(models.signals.post_save, sender=Homework) def execute_after_save(sender, instance, created, *args, **kwargs): if created: students = Student.objects.exclude(username=\"teacher\").all() for student in students: duplicates = Assignment.objects.filter(student=student, homework=instance).all() if not len(duplicates): assignment = Assignment(student=student, homework=instance) assignment.save() # Create your models here. view.py - \u0417\u0430\u043f\u0440\u043e\u0441\u044b \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a urls from django.shortcuts import render, redirect from django.urls import reverse from django.db import IntegrityError from django.contrib.auth import authenticate, login, logout from django.views.generic import ListView, DetailView from django.contrib.auth.decorators import login_required from homework_app.models import Student, Homework, Assignment from homework_app.forms import AssignmentForm def register(request): if request.method == \"POST\": username = request.POST[\"username\"] password = request.POST[\"password\"] email = request.POST[\"email\"] first_name = request.POST.get(\"first_name\", 'NaN') last_name = request.POST.get(\"last_name\", 'NaN') confirmation = request.POST[\"confirmation\"] if password != confirmation: return render(request, \"register.html\", { \"message\": \"passwords do not match\" }) try: student = Student.objects.create_user(username, email, password) student.first_name = first_name student.last_name = last_name student.save() homeworks = Homework.objects.all() for homework in homeworks: assignment = Assignment(student=student, homework=homework) assignment.save() except IntegrityError: return render(request, \"register.html\", { \"message\": \"username already taken\" }) login(request, student) return redirect(reverse(\"homework_list\")) else: return render(request, \"register.html\") def log_in(request): if request.method == \"POST\": username = request.POST['username'] password = request.POST['password'] user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect(reverse('homework_list')) else: error_text = 'invalid credentials' return render(request, 'login.html', locals()) @login_required def log_out(request): logout(request) return redirect(reverse('login')) @login_required def class_grades_list(request): context = {} students = Student.objects.exclude(username=\"teacher\").all() context[\"students\"] = students context[\"homeworks\"] = Homework.objects.all() context[\"grades\"] = {} assignments = Assignment.objects.all() for homework in context[\"homeworks\"]: for assignment in assignments: if assignment.homework == homework and assignment.student.pk != 3: if not assignment.student.pk in context[\"grades\"]: context[\"grades\"][assignment.student.pk] = [] context[\"grades\"][assignment.student.pk].append( assignment.grade) return render(request, 'class_grades.html', context) class HomeworkList(ListView): model = Homework template_name = 'homework_list.html' class HomeworkDetail(DetailView): model = Homework template_name = 'homework_detail.html' def get_context_data(self, **kwargs): context = super().get_context_data(**kwargs) context['form'] = AssignmentForm() return context @login_required def hand_in(request, pk): homework = Homework.objects.get(pk=pk) assignment = Assignment.objects.get(student=request.user, homework=homework) form = AssignmentForm(request.POST, instance=assignment) if form.is_valid(): form.save() return redirect(reverse('homework_list')) # Create your views here. urls.py - \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a html from django.urls import path from django.contrib.auth.decorators import login_required from homework_app import views urlpatterns = [ path('register/', views.register, name='register'), path('login/', views.log_in, name='login'), path('log_out/', views.log_out, name='logout'), path('class_grades/', views.class_grades_list, name='class_grades'), path('homework/', login_required(views.HomeworkList.as_view()), name='homework_list'), path('homework/<int:pk>', login_required(views.HomeworkDetail.as_view()), name='homework_detail'), path('handin/<int:pk>', login_required(views.hand_in), name='handin') ] html: - base - \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0443\u0447\u0435\u043d\u0438\u043a\u0430 - class_grades - \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043e\u0446\u0435\u043d\u043a\u0430\u043c \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 - homework_detail - \u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u043a \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u043c\u0443 \u0437\u0430\u0434\u0430\u043d\u0438\u044e - homework_list - \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 - login - \u0432\u0445\u043e\u0434 \u0443\u0447\u0435\u043d\u0438\u043a\u0430 - register - \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0443\u0447\u0435\u043d\u0438\u043a\u0430 base.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Homework</title> <style> body { padding-left: 30px; } nav { background-color: lightgray; } table, th, td { border: 1px solid black; border-collapse: collapse; } </style> </head> <body> <nav> {% if user.is_authenticated %} <a href=\"{% url 'class_grades' %}\">Class grades</a> <a href=\"{% url 'homework_list' %}\">My homework</a> <a href=\"{% url 'logout' %}\">Log out</a> {% endif %} {% if not user.is_authenticated %} <a href=\"{% url 'login' %}\">Log in</a> <a href=\"{% url 'register' %}\">Register</a> {% endif %} </nav> <br/> {% block body %} {% endblock %} </body> </html> class_grades.html {% extends 'base.html' %} {% block body %} <table> <tr> <th>Student</th> {% for homework in homeworks %} <th>{{ homework.name }}</th> {% endfor %} </tr> {% for student in students %} <tr> <td>{{ student.first_name }} {{ student.last_name }}</td> {% for key, values in grades.items %} {% if key == student.pk %} {% for value in values %} <td>{{ value }}</td> {% endfor %} {% endif %} {% endfor %} </tr> {% endfor %} </table> {% endblock %} Footer homework_detail.html {% extends 'base.html' %} {% block body %} <h2>{{ object.name }}</h2> <h3>{{ object.subject }}</h3> <p> Teacher: {{ object.teacher }} </p> <div> <p>Given on: {{ object.begin_date }}</p> <p>Deadline: <span style=\"color: red\">{{ object.deadline }}</span></p> </div> <hr/> <div> {{ object.task }} </div> {% if user.is_authenticated %} <form action=\"{% url 'handin' object.pk %}\" method=\"post\"> {% csrf_token %} {{ form.as_p }} <input type=\"submit\" value=\"Submit\"> </form> {% endif %} <br/> <a href=\"{% url 'homework_list' %}\">To homework list</a> {% endblock %} homework_list.html {% extends 'base.html' %} {% block body %} <table> <tr> <th>Name</th> <th>Subject</th> <th>Given on</th> <th>Deadline</th> <th>Teacher</th> <th>Penalty</th> </tr> {% for homework in object_list %} <tr> <td> <a href=\"{% url 'homework_detail' homework.pk %}\"> {{ homework.name }} </a> </td> <td>{{ homework.subject }}</td> <td>{{ homework.begin_date }}</td> <td>{{ homework.deadline }}</td> <td>{{ homework.teacher }}</td> <td>{{ homework.penalty }}</td> </tr> {% endfor %} </table> {% endblock %} login.html {% extends 'base.html' %} {% block body %} <h2>Login</h2> {% if next %} {% if user.is_authenticated %} <p>Your account doesn't have access to this page. To proceed, please login with an account that has access.</p> {% else %} <p>Please login to see this page.</p> {% endif %} {% endif %} <form action=\"{% url 'login' %}\" method=\"post\"> {% csrf_token %} <div class=\"form-group\"> <input autofocus class=\"form-control\" type=\"text\" name=\"username\" placeholder=\"Username\"> </div> <div class=\"form-group\"> <input class=\"form-control\" type=\"password\" name=\"password\" placeholder=\"Password\"> </div> <input class=\"btn btn-primary\" type=\"submit\" value=\"Login\"> </form> Don't have an account? <a href=\"{% url 'register' %}\">Register here.</a> {% endblock %} Footer register.html {% extends 'base.html' %} {% block body %} <h2>Register</h2> {% if message %} <div>{{ message }}</div> {% endif %} <form action=\"{% url 'register' %}\" method=\"post\"> {% csrf_token %} <div class=\"form-group\"> <input class=\"form-control\" autofocus type=\"text\" name=\"username\" placeholder=\"Username\"> </div> <div class=\"form-group\"> <input class=\"form-control\" type=\"email\" name=\"email\" placeholder=\"Email Address\"> </div> <div class=\"form-group\"> <input class=\"form-control\" autofocus type=\"text\" name=\"first_name\" placeholder=\"First name\"> </div> <div class=\"form-group\"> <input class=\"form-control\" autofocus type=\"text\" name=\"last_name\" placeholder=\"Last name\"> </div> <div class=\"form-group\"> <input class=\"form-control\" type=\"password\" name=\"password\" placeholder=\"Password\"> </div> <div class=\"form-group\"> <input class=\"form-control\" type=\"password\" name=\"confirmation\" placeholder=\"Confirm Password\"> </div> <input class=\"btn btn-primary\" type=\"submit\" value=\"Register\"> </form> Already have an account? <a href=\"{% url 'login' %}\">Log In here.</a> {% endblock %} \u041f\u0440\u0438\u043b\u0438\u0447\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u041f\u043e\u044f\u0432\u0438\u043b\u043e\u0441\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u0438 \u0432\u043a\u043b\u044e\u0447\u0451\u043d \u0431\u0443\u0442\u0441\u0442\u0440\u0430\u043f. \u041f\u043e\u044f\u0432\u0438\u043b\u0441\u044f \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043d\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u043e\u0433\u0443\u0442 \u0434\u0430\u0432\u0430\u0442\u044c \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0438 \u0432\u0438\u0434\u0435\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432. \u0412 \u0442\u043e \u0436\u0435 \u0432\u0440\u0435\u043c\u044f \u0443\u0447\u0435\u043d\u0438\u043a \u0443 \u0441\u0435\u0431\u044f \u043c\u043e\u0436\u0435\u0442 \u0432\u0438\u0434\u0435\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0432\u043e\u0438 \u043e\u0446\u0435\u043d\u043a\u0438, \u0430 \u043d\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e, \u0432 \u043f\u0435\u0440\u0432\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c: \u043f\u043e\u044f\u0432\u0438\u043b\u0430\u0441\u044c \u0440\u043e\u043b\u044c \u0443\u0447\u0438\u0442\u0435\u043b\u044f \u0438 \u043a\u043b\u0430\u0441\u0441 User \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0440\u043e\u043b\u0438 (\u0431\u0443\u043b\u0435\u0432\u044b\u0439): from django.db import models from django.contrib.auth.models import User, AbstractUser from django.dispatch import receiver class Homework(models.Model): homework_id = models.IntegerField(blank=False, primary_key=True) name = models.CharField(max_length=100, blank=False) task = models.CharField(max_length=300) subject = models.CharField(max_length=30, blank=False) begin_date = models.DateField(blank=False) deadline = models.DateField(blank=False) penalty = models.CharField(max_length=100) teacher = models.ForeignKey('Teacher', on_delete=models.CASCADE) students = models.ManyToManyField('Student', through='Assignment') def __str__(self): return self.name class User(AbstractUser): is_student = models.BooleanField(default=False) is_teacher = models.BooleanField(default=False) first_name = models.CharField(max_length=30) last_name = models.CharField(max_length=30) def __str__(self): return f'{self.first_name} {self.last_name}' class Student(models.Model): user = models.OneToOneField(User, on_delete=models.CASCADE, primary_key=True) #REQUIRED_FIELDS = ['self.user.first_name', 'self.user.last_name'] def __str__(self): return f\"{self.user.first_name} {self.user.last_name}\" class Teacher(models.Model): user = models.OneToOneField(User, on_delete=models.CASCADE, primary_key=True) def __str__(self): return f\"{self.user.first_name} {self.user.last_name}\" class Assignment(models.Model): assignment_id = models.IntegerField(blank=False, primary_key=True) student = models.ForeignKey('Student', on_delete=models.CASCADE) homework = models.ForeignKey('Homework', on_delete=models.CASCADE) grade = models.CharField(default='-', max_length=5, blank=True) submission = models.CharField(max_length=300, blank=True) def __str__(self): return f'{self.student.user.first_name} {self.student.user.last_name}:\\ {self.homework.name}\\ | {\"graded\" if self.grade != \"-\" else \"submitted\" if len(self.submission) else \"in process\"}' @receiver(models.signals.post_save, sender=Homework) def execute_after_save(sender, instance, created, *args, **kwargs): if created: students = Student.objects.all() for student in students: duplicates = Assignment.objects.filter(student=student, homework=instance).all() if not len(duplicates): assignment = Assignment(student=student, homework=instance) assignment.save() \u0414\u043b\u044f \u0432\u0435\u0440\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0440\u043e\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0444\u0430\u0439\u043b decorators.py, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 student_required \u0438 teacher_required \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0440\u043e\u043b\u0435\u0439: from django.contrib.auth import REDIRECT_FIELD_NAME from django.contrib.auth.decorators import user_passes_test def student_required(function=None, redirect_field_name=REDIRECT_FIELD_NAME, login_url='login'): ''' Decorator for views that checks that the logged in user is a student, redirects to the log-in page if necessary. ''' actual_decorator = user_passes_test( lambda u: u.is_active and u.is_student, login_url=login_url, redirect_field_name=redirect_field_name ) if function: return actual_decorator(function) return actual_decorator def teacher_required(function=None, redirect_field_name=REDIRECT_FIELD_NAME, login_url='login'): ''' Decorator for views that checks that the logged in user is a teacher, redirects to the log-in page if necessary. ''' actual_decorator = user_passes_test( lambda u: u.is_active and u.is_teacher, login_url=login_url, redirect_field_name=redirect_field_name ) if function: return actual_decorator(function) return actual_decorator \u0414\u0430\u043b\u0435\u0435 \u044d\u0442\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 views.py, \u043a\u0443\u0434\u0430 \u0432\u043d\u0435\u0441\u0435\u043d\u044b \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u0434\u043b\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 class_grades_list (\u0447\u0442\u043e\u0431\u044b \u0443\u0447\u0435\u043d\u0438\u043a\u0443 \u0431\u044b\u043b\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0442\u043e\u0442\u043b\u044c\u043a\u043e \u0435\u0433\u043e \u043e\u0446\u0435\u043d\u043a\u0438, \u0430 \u0443\u0447\u0438\u0442\u0435\u043b\u044e - \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445). \u0422\u0430\u043a\u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 @login_required from django.shortcuts import render, redirect from django.urls import reverse from django.db import IntegrityError from django.contrib.auth import authenticate, login, logout from django.views.generic import CreateView, ListView, DetailView from django.contrib.auth.decorators import login_required from django.utils.decorators import method_decorator from homework_app.models import Student, Homework, Assignment,User,Teacher from homework_app.forms import AssignmentForm,StudentSignUpForm,TeacherSignUpForm,HomeworkForm from homework_app.decorators import student_required,teacher_required from django.http import HttpResponseRedirect class StudentSignUpView(CreateView): model = User form_class = StudentSignUpForm template_name = 'register.html' def get_context_data(self, **kwargs): kwargs['user_type'] = 'student' return super().get_context_data(**kwargs) def form_valid(self, form): user = form.save() login(self.request, user) return redirect('login') class TearchSignUpView(CreateView): model = User form_class = TeacherSignUpForm template_name = 'register.html' def get_context_data(self, **kwargs): kwargs['user_type'] = 'teacher' return super().get_context_data(**kwargs) def form_valid(self, form): user = form.save() login(self.request, user) return redirect('login') @method_decorator(teacher_required, name='dispatch') class HomeworkCreate(CreateView): model = Homework form_class: HomeworkForm template_name = 'createhomework.html' fields = \"__all__\" def get_context_data(self, **kwargs): context = super().get_context_data(**kwargs) context['form'] = HomeworkForm() return context def form_valid(self, form): form.save() return redirect('homework_list') def log_in(request): # if request.user.is_authenticated: # return redirect('homework_list') if request.method == \"POST\": username = request.POST['username'] password = request.POST['password'] user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect(reverse('homework_list')) else: error_text = 'invalid credentials' return render(request, 'login.html', locals()) @login_required def log_out(request): logout(request) return redirect(reverse('login')) @login_required @teacher_required def class_grades_list(request): context = {} students = Student.objects.all() context[\"students\"] = students context[\"homeworks\"] = Homework.objects.all() context[\"grades\"] = {} assignments = Assignment.objects.all() for homework in context[\"homeworks\"]: for assignment in assignments: if assignment.homework == homework and assignment.student.pk != 3: if not assignment.student.pk in context[\"grades\"]: context[\"grades\"][assignment.student.pk] = [] context[\"grades\"][assignment.student.pk].append( assignment.grade) return render(request, 'class_grades.html', context) @method_decorator(login_required, name='dispatch') class HomeworkList(ListView): model = Homework template_name = 'homework_list.html' @method_decorator(login_required, name='dispatch') class HomeworkDetail(DetailView): model = Homework template_name = 'homework_detail.html' def get_context_data(self, **kwargs): context = super().get_context_data(**kwargs) context['form'] = AssignmentForm() return context @method_decorator(student_required, name='dispatch') class AssignmentView(ListView): model = Assignment template_name = 'studentgrade.html' def get_queryset(self): studentt=Student.objects.get(user=self.request.user) return Assignment.objects.filter(student=studentt) @login_required def hand_in(request, pk): homework = Homework.objects.get(pk=pk) studentt = Student.objects.get(user=request.user) assignment = Assignment.objects.get(student=studentt,homework=homework) form = AssignmentForm(request.POST,instance=assignment) if form.is_valid(): form.save() return redirect(reverse('homework_list')) templates (\u043d\u043e\u0432\u044b\u0435 \u0438 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b\u0435): base.html - Bootstrap: <!DOCTYPE html> Homework <!-- CSS only --> <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi\" crossorigin=\"anonymous\"> </head> <body> {% comment %} <nav> {% if user.is_authenticated %} <a href=\"{% url 'class_grades' %}\">Class grades</a> {% if user.is_student %} <a href=\"{% url 'homework_list' %}\">My homework</a> {% endif %} <a href=\"{% url 'logout' %}\">Log out</a> <span> {{ user.username }} </span> {% endif %} </nav> {% endcomment %} <nav class=\"navbar navbar-expand-lg navbar-dark bg-primary\"> <div class=\"container-fluid\"> {% if user.is_student%} <span class=\"navbar-brand\" >Student</span> {% endif %} {% if user.is_teacher%} <span class=\"navbar-brand\" >Teacher</span> {% endif %} <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarColor01\" aria-controls=\"navbarColor01\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarColor01\"> <ul class=\"navbar-nav me-auto\"> {% if user.is_authenticated %} <li class=\"nav-item\"> <a class=\"nav-link active\"href=\"{% url 'homework_list' %}\">Home <span class=\"visually-hidden\">(current)</span> </a> </li> {% endif %} {% if user.is_teacher %} <li class=\"nav-item\"> <a class=\"nav-link\" href=\"{% url 'class_grades' %}\">Class Grades</a> </li> {% endif %} {% if not user.is_authenticated %} <li class=\"nav-item\"> <a class=\"nav-link\" href=\"{% url 'login' %}\">Log in</a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"{% url 'register' %}\">Register</a> </li> {% endif %} {% if user.is_student %} <li class=\"nav-item\"> <a class=\"nav-link\" href=\"{% url 'mygrade' %}\">My grade</a> </li> {% endif %} {% if user.is_teacher%} <li class=\"nav-item\"> <a class=\"nav-link\" href=\"{% url 'homework_create' %}\">Add homework</a> </li> {% endif %} {% if user.is_authenticated %} <li class=\"nav-item\"> <a class=\"nav-link\" href=\"{% url 'logout' %}\">Log out</a> </li> {% endif %} </ul> </div> </div> </nav> <br/> {% block body %} {% endblock %} </body> </html> createhomework.html- \u0443\u0447\u0438\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0434\u043e\u043c\u0430\u0448\u043a\u0443 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0437 \u0430\u0434\u043c\u0438\u043d\u043a\u0438 {% extends 'base.html' %} {% load crispy_forms_tags %} {% block body %} <div class=\"row\"> <div class=\"col-md-8 col-sm-10 col-12\"> <h2>Create Homework</h2> <form method=\"post\" novalidate> {% csrf_token %} <input type=\"hidden\" name=\"next\" value=\"{{ next }}\"> {{ form|crispy }} <p class=\"text-16\">{{ form.error_msg }} {{ form.non_field_errors }} {{ form.errors }}</p> <button type=\"submit\" class=\"btn btn-success\">Create</button> </form> </div> </div> {% endblock %} studentgrade.html - \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0443\u0447\u0438\u0442\u0435\u043b\u044e: {% extends 'base.html' %} {% block body %} <table> <tr> <th>Grade of Student </th> </tr> {% for ass in object_list %} <tr> <td>{{ ass.homework.name }}</td> <td> {{ass.grade}} </tr> {% endfor %} </table> {% endblock %} \u0424\u0430\u0439\u043b admin.py - \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0440\u043e\u043b\u0438 \u0434\u043b\u044f \u0443\u0447\u0438\u0442\u0435\u043b\u044f \u043d\u0430 \u043f\u0430\u043d\u0435\u043b\u0438: from django.contrib import admin from .models import * admin.site.register(Student) admin.site.register(Homework) admin.site.register(Assignment) admin.site.register(Teacher) admin.site.register(User) \u0422\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d debug-toolbar \u0434\u043b\u044f \u0440\u0435\u0436\u0438\u043c\u0430 \u043e\u0442\u043b\u0430\u0434\u043a\u0438 (\u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043b\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u044b).","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"l2/#2","text":"github - \u043f\u0443\u043b\u043b-\u0440\u0435\u043a\u0432\u0435\u0441\u0442 version_1 - \u0441\u043a\u0440\u0438\u043d\u043a\u0430\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0435\u0440\u0432\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 version_2 - \u0441\u043a\u0440\u0438\u043d\u043a\u0430\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u041f\u0420\u0418\u041b\u0418\u0427\u041d\u041e\u0419 \u0432\u0435\u0440\u0441\u0438\u0438","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2"},{"location":"l2/#_1","text":"\u0420\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0432 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u043c \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0438, \u0434\u043e\u0441\u0443\u0442\u043f \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 http://127.0.0.1:8000/ models.py - \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 from django.db import models from datetime import date from django.contrib.auth.models import AbstractUser # Create your models here. class Owner(AbstractUser): owner_id = models.IntegerField(primary_key=True) date_of_birth = models.DateField(null=True) passport = models.CharField(max_length=15, blank=False, null=False, unique=True) address = models.CharField(max_length=100, blank=False, null=False) nationality = models.CharField(max_length=30, blank=True, null=False) class Car(models.Model): id_number = models.IntegerField(primary_key=True) brand = models.CharField(max_length=30) car_model = models.CharField(max_length=30) color = models.CharField(max_length=30) official_number = models.CharField(max_length=30) class Owning(models.Model): owner = models.ForeignKey(Owner, on_delete=models.CASCADE) car = models.ForeignKey(Car, on_delete=models.CASCADE) begin_date = models.DateField(default=date(2010, 1, 1)) end_date = models.DateField(default=date(2020, 1, 1)) class DrivingLicense(models.Model): LICENCE_TYPES = ( ('A', 'Motorcycles'), ('B', 'Cars'), ('D', 'Buses'), ) number = models.IntegerField(primary_key=True) owner = models.ForeignKey(Owner, on_delete=models.CASCADE) date_of_issue = models.DateField(default=date(2010, 1, 1)) type = models.CharField(max_length=3, choices=LICENCE_TYPES) \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0444\u043e\u0440\u043c\u044b \u0434\u043b\u044f \u043c\u0430\u043d\u0438\u043f\u0443\u043b\u044f\u0446\u0438\u0439 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0443\u0442\u044c \u043a \u043f\u0430\u043f\u043a\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u043d\u0438 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f: TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [BASE_DIR / 'templates'], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] \u0414\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439: AUTH_USER_MODEL = 'project_first_app.Owner' \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, owners.html \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 <!DOCTYPE html> Owners <style> table { border-spacing: 20px 10px; font-weight: bold; } </style> </head> <body> {% if new %} <form method=\"POST\" enctype=\"multipart/form-data\"> {% csrf_token %} {{ form.as_p }} <input type=\"submit\" value=\"Submit\"> </form> {% else %} <table> <thead> <tr> <th>Name</th> <th>Surname</th> <th>Date of birth</th> <th>Passport</th> <th>Address</th> <th>Nationality</th> </tr> </thead> <tbody> {% if all %} {% for owner in owners %} <tr> <th>{{ owner.first_name }}</th> <th>{{ owner.last_name }}</th> <th>{{ owner.date_of_birth }}</th> <th>{{ owner.passport }}</th> <th>{{ owner.address }}</th> <th>{{ owner.nationality }}</th> </tr> {% endfor %} {% endif %} {% if one %} <tr> <th>{{ owner.first_name }}</th> <th>{{ owner.last_name }}</th> <th>{{ owner.date_of_birth }}</th> <th>{{ owner.passport }}</th> <th>{{ owner.address }}</th> <th>{{ owner.nationality }}</th> </tr> {% endif %} </tbody> </table> {% endif %} <a href=\"../create_owner\">New</a> </body> </html> \u041f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432: \u041f\u0440\u043e\u0435\u043a\u0442 - urls.py: urlpatterns = [ path('admin/', admin.site.urls), path('app/', include('project_first_app.urls')), ] \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 - urls.py: urlpatterns = [ path('owners/', views.all_owners_detail), path('owner/<int:owner_id>/', views.owner_detail), path('create_owner/', views.create_owner), path('cars/', AllCars.as_view()), path('car/<int:pk>/', OneCar.as_view()), path('car/<int:pk>/update/', CarUpdate.as_view()), path('car/create/', CarCreate.as_view()), path('car/<int:pk>/delete/', CarDelete.as_view()), ] views.py - \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u044b from django.shortcuts import render , get_object_or_404, redirect from django.views.generic import ListView, DetailView, UpdateView, CreateView, DeleteView from project_first_app.form import OwnerForm from .models import Owner, Car def all_owners_detail(request): context = {\"owners\": Owner.objects.all(), \"all\": True} return render(request, 'owners.html', context) def owner_detail(request, owner_id): context = get_object_or_404(Owner, pk=owner_id) return render(request, 'owners.html', {\"owner\": context, \"one\": True}) def create_owner(request): form = OwnerForm(request.POST or None) if form.is_valid(): form.save() return redirect('/owners') return render(request, \"owners.html\", {\"form\": form, \"new\": True}) class AllCars(ListView): model = Car template_name = \"cars.html\" class OneCar(DetailView): model = Car template_name = \"cars.html\" class CarDelete(DeleteView): model = Car template_name = 'car_confirm_delete.html' success_url = '/cars/' class CarCreate(CreateView): model = Car template_name = 'car_create_update.html' fields = ['id_number', 'brand', 'car_model', 'color', 'official_number'] success_url = '/cars/ class CarUpdate(UpdateView): model = Car fields = ['id_number', 'brand', 'car_model', 'color', 'official_number'] success_url = '/cars/' template_name = 'car_create_update.html'","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"l2/#-2","text":"\u041e \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043f\u0440\u0435\u0434\u043c\u0435\u0442, \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c, \u0434\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438, \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0448\u0442\u0440\u0430\u0444\u0430\u0445. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. - \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043f\u043e \u0432\u0441\u0435\u043c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c (\u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f). - \u0421\u0434\u0430\u0447\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c \u0432\u0438\u0434\u0435. - \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 (\u0443\u0447\u0438\u0442\u0435\u043b\u044c) \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u0437\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. - \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430. \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0442\u0440\u0438 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 - \u0443\u0447\u0435\u043d\u0438\u043a (class Student), \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435(class Homework) \u0438 \u0435\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435(class Assignment). \u0422\u0430\u043a \u043a\u0430\u043a \u0443\u0447\u0438\u0442\u0435\u043b\u044c \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0432 \u0440\u043e\u043b\u0438 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430, \u0442\u043e \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u0435 \u0431\u0443\u0434\u0435\u043c. models.py from django.db import models from django.contrib.auth.models import User, AbstractUser from django.dispatch import receiver class Homework(models.Model): homework_id = models.IntegerField(blank=False, primary_key=True) name = models.CharField(max_length=100, blank=False) task = models.CharField(max_length=300) subject = models.CharField(max_length=30, blank=False) begin_date = models.DateField(blank=False) deadline = models.DateField(blank=False) penalty = models.CharField(max_length=100) teacher = models.CharField(max_length=30, blank=False) students = models.ManyToManyField('Student', through='Assignment') def __str__(self): return self.name class Student(AbstractUser): first_name = models.CharField(max_length=30) last_name = models.CharField(max_length=30) REQUIRED_FIELDS = ['first_name', 'last_name'] def __str__(self): return f'{self.first_name} {self.last_name}' class Assignment(models.Model): assignment_id = models.IntegerField(blank=False, primary_key=True) student = models.ForeignKey('Student', on_delete=models.CASCADE) homework = models.ForeignKey('Homework', on_delete=models.CASCADE) grade = models.CharField(default='-', max_length=5, blank=True) submission = models.CharField(max_length=300, blank=True) def __str__(self): return f'{self.student.first_name} {self.student.last_name}:\\ {self.homework.name}\\ | {\"graded\" if self.grade != \"-\" else \"submitted\" if len(self.submission) else \"in process\"}' @receiver(models.signals.post_save, sender=Homework) def execute_after_save(sender, instance, created, *args, **kwargs): if created: students = Student.objects.exclude(username=\"teacher\").all() for student in students: duplicates = Assignment.objects.filter(student=student, homework=instance).all() if not len(duplicates): assignment = Assignment(student=student, homework=instance) assignment.save() # Create your models here. view.py - \u0417\u0430\u043f\u0440\u043e\u0441\u044b \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a urls from django.shortcuts import render, redirect from django.urls import reverse from django.db import IntegrityError from django.contrib.auth import authenticate, login, logout from django.views.generic import ListView, DetailView from django.contrib.auth.decorators import login_required from homework_app.models import Student, Homework, Assignment from homework_app.forms import AssignmentForm def register(request): if request.method == \"POST\": username = request.POST[\"username\"] password = request.POST[\"password\"] email = request.POST[\"email\"] first_name = request.POST.get(\"first_name\", 'NaN') last_name = request.POST.get(\"last_name\", 'NaN') confirmation = request.POST[\"confirmation\"] if password != confirmation: return render(request, \"register.html\", { \"message\": \"passwords do not match\" }) try: student = Student.objects.create_user(username, email, password) student.first_name = first_name student.last_name = last_name student.save() homeworks = Homework.objects.all() for homework in homeworks: assignment = Assignment(student=student, homework=homework) assignment.save() except IntegrityError: return render(request, \"register.html\", { \"message\": \"username already taken\" }) login(request, student) return redirect(reverse(\"homework_list\")) else: return render(request, \"register.html\") def log_in(request): if request.method == \"POST\": username = request.POST['username'] password = request.POST['password'] user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect(reverse('homework_list')) else: error_text = 'invalid credentials' return render(request, 'login.html', locals()) @login_required def log_out(request): logout(request) return redirect(reverse('login')) @login_required def class_grades_list(request): context = {} students = Student.objects.exclude(username=\"teacher\").all() context[\"students\"] = students context[\"homeworks\"] = Homework.objects.all() context[\"grades\"] = {} assignments = Assignment.objects.all() for homework in context[\"homeworks\"]: for assignment in assignments: if assignment.homework == homework and assignment.student.pk != 3: if not assignment.student.pk in context[\"grades\"]: context[\"grades\"][assignment.student.pk] = [] context[\"grades\"][assignment.student.pk].append( assignment.grade) return render(request, 'class_grades.html', context) class HomeworkList(ListView): model = Homework template_name = 'homework_list.html' class HomeworkDetail(DetailView): model = Homework template_name = 'homework_detail.html' def get_context_data(self, **kwargs): context = super().get_context_data(**kwargs) context['form'] = AssignmentForm() return context @login_required def hand_in(request, pk): homework = Homework.objects.get(pk=pk) assignment = Assignment.objects.get(student=request.user, homework=homework) form = AssignmentForm(request.POST, instance=assignment) if form.is_valid(): form.save() return redirect(reverse('homework_list')) # Create your views here. urls.py - \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a html from django.urls import path from django.contrib.auth.decorators import login_required from homework_app import views urlpatterns = [ path('register/', views.register, name='register'), path('login/', views.log_in, name='login'), path('log_out/', views.log_out, name='logout'), path('class_grades/', views.class_grades_list, name='class_grades'), path('homework/', login_required(views.HomeworkList.as_view()), name='homework_list'), path('homework/<int:pk>', login_required(views.HomeworkDetail.as_view()), name='homework_detail'), path('handin/<int:pk>', login_required(views.hand_in), name='handin') ] html: - base - \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0443\u0447\u0435\u043d\u0438\u043a\u0430 - class_grades - \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043e\u0446\u0435\u043d\u043a\u0430\u043c \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 - homework_detail - \u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u043a \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u043c\u0443 \u0437\u0430\u0434\u0430\u043d\u0438\u044e - homework_list - \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 - login - \u0432\u0445\u043e\u0434 \u0443\u0447\u0435\u043d\u0438\u043a\u0430 - register - \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0443\u0447\u0435\u043d\u0438\u043a\u0430 base.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Homework</title> <style> body { padding-left: 30px; } nav { background-color: lightgray; } table, th, td { border: 1px solid black; border-collapse: collapse; } </style> </head> <body> <nav> {% if user.is_authenticated %} <a href=\"{% url 'class_grades' %}\">Class grades</a> <a href=\"{% url 'homework_list' %}\">My homework</a> <a href=\"{% url 'logout' %}\">Log out</a> {% endif %} {% if not user.is_authenticated %} <a href=\"{% url 'login' %}\">Log in</a> <a href=\"{% url 'register' %}\">Register</a> {% endif %} </nav> <br/> {% block body %} {% endblock %} </body> </html> class_grades.html {% extends 'base.html' %} {% block body %} <table> <tr> <th>Student</th> {% for homework in homeworks %} <th>{{ homework.name }}</th> {% endfor %} </tr> {% for student in students %} <tr> <td>{{ student.first_name }} {{ student.last_name }}</td> {% for key, values in grades.items %} {% if key == student.pk %} {% for value in values %} <td>{{ value }}</td> {% endfor %} {% endif %} {% endfor %} </tr> {% endfor %} </table> {% endblock %} Footer homework_detail.html {% extends 'base.html' %} {% block body %} <h2>{{ object.name }}</h2> <h3>{{ object.subject }}</h3> <p> Teacher: {{ object.teacher }} </p> <div> <p>Given on: {{ object.begin_date }}</p> <p>Deadline: <span style=\"color: red\">{{ object.deadline }}</span></p> </div> <hr/> <div> {{ object.task }} </div> {% if user.is_authenticated %} <form action=\"{% url 'handin' object.pk %}\" method=\"post\"> {% csrf_token %} {{ form.as_p }} <input type=\"submit\" value=\"Submit\"> </form> {% endif %} <br/> <a href=\"{% url 'homework_list' %}\">To homework list</a> {% endblock %} homework_list.html {% extends 'base.html' %} {% block body %} <table> <tr> <th>Name</th> <th>Subject</th> <th>Given on</th> <th>Deadline</th> <th>Teacher</th> <th>Penalty</th> </tr> {% for homework in object_list %} <tr> <td> <a href=\"{% url 'homework_detail' homework.pk %}\"> {{ homework.name }} </a> </td> <td>{{ homework.subject }}</td> <td>{{ homework.begin_date }}</td> <td>{{ homework.deadline }}</td> <td>{{ homework.teacher }}</td> <td>{{ homework.penalty }}</td> </tr> {% endfor %} </table> {% endblock %} login.html {% extends 'base.html' %} {% block body %} <h2>Login</h2> {% if next %} {% if user.is_authenticated %} <p>Your account doesn't have access to this page. To proceed, please login with an account that has access.</p> {% else %} <p>Please login to see this page.</p> {% endif %} {% endif %} <form action=\"{% url 'login' %}\" method=\"post\"> {% csrf_token %} <div class=\"form-group\"> <input autofocus class=\"form-control\" type=\"text\" name=\"username\" placeholder=\"Username\"> </div> <div class=\"form-group\"> <input class=\"form-control\" type=\"password\" name=\"password\" placeholder=\"Password\"> </div> <input class=\"btn btn-primary\" type=\"submit\" value=\"Login\"> </form> Don't have an account? <a href=\"{% url 'register' %}\">Register here.</a> {% endblock %} Footer register.html {% extends 'base.html' %} {% block body %} <h2>Register</h2> {% if message %} <div>{{ message }}</div> {% endif %} <form action=\"{% url 'register' %}\" method=\"post\"> {% csrf_token %} <div class=\"form-group\"> <input class=\"form-control\" autofocus type=\"text\" name=\"username\" placeholder=\"Username\"> </div> <div class=\"form-group\"> <input class=\"form-control\" type=\"email\" name=\"email\" placeholder=\"Email Address\"> </div> <div class=\"form-group\"> <input class=\"form-control\" autofocus type=\"text\" name=\"first_name\" placeholder=\"First name\"> </div> <div class=\"form-group\"> <input class=\"form-control\" autofocus type=\"text\" name=\"last_name\" placeholder=\"Last name\"> </div> <div class=\"form-group\"> <input class=\"form-control\" type=\"password\" name=\"password\" placeholder=\"Password\"> </div> <div class=\"form-group\"> <input class=\"form-control\" type=\"password\" name=\"confirmation\" placeholder=\"Confirm Password\"> </div> <input class=\"btn btn-primary\" type=\"submit\" value=\"Register\"> </form> Already have an account? <a href=\"{% url 'login' %}\">Log In here.</a> {% endblock %}","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 - \u0414\u043e\u0441\u043a\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 (\u0412\u0430\u0440\u0438\u0430\u043d\u0442 2)"},{"location":"l2/#_2","text":"\u041f\u043e\u044f\u0432\u0438\u043b\u043e\u0441\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u0438 \u0432\u043a\u043b\u044e\u0447\u0451\u043d \u0431\u0443\u0442\u0441\u0442\u0440\u0430\u043f. \u041f\u043e\u044f\u0432\u0438\u043b\u0441\u044f \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043d\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u043e\u0433\u0443\u0442 \u0434\u0430\u0432\u0430\u0442\u044c \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0438 \u0432\u0438\u0434\u0435\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432. \u0412 \u0442\u043e \u0436\u0435 \u0432\u0440\u0435\u043c\u044f \u0443\u0447\u0435\u043d\u0438\u043a \u0443 \u0441\u0435\u0431\u044f \u043c\u043e\u0436\u0435\u0442 \u0432\u0438\u0434\u0435\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0432\u043e\u0438 \u043e\u0446\u0435\u043d\u043a\u0438, \u0430 \u043d\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e, \u0432 \u043f\u0435\u0440\u0432\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c: \u043f\u043e\u044f\u0432\u0438\u043b\u0430\u0441\u044c \u0440\u043e\u043b\u044c \u0443\u0447\u0438\u0442\u0435\u043b\u044f \u0438 \u043a\u043b\u0430\u0441\u0441 User \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0440\u043e\u043b\u0438 (\u0431\u0443\u043b\u0435\u0432\u044b\u0439): from django.db import models from django.contrib.auth.models import User, AbstractUser from django.dispatch import receiver class Homework(models.Model): homework_id = models.IntegerField(blank=False, primary_key=True) name = models.CharField(max_length=100, blank=False) task = models.CharField(max_length=300) subject = models.CharField(max_length=30, blank=False) begin_date = models.DateField(blank=False) deadline = models.DateField(blank=False) penalty = models.CharField(max_length=100) teacher = models.ForeignKey('Teacher', on_delete=models.CASCADE) students = models.ManyToManyField('Student', through='Assignment') def __str__(self): return self.name class User(AbstractUser): is_student = models.BooleanField(default=False) is_teacher = models.BooleanField(default=False) first_name = models.CharField(max_length=30) last_name = models.CharField(max_length=30) def __str__(self): return f'{self.first_name} {self.last_name}' class Student(models.Model): user = models.OneToOneField(User, on_delete=models.CASCADE, primary_key=True) #REQUIRED_FIELDS = ['self.user.first_name', 'self.user.last_name'] def __str__(self): return f\"{self.user.first_name} {self.user.last_name}\" class Teacher(models.Model): user = models.OneToOneField(User, on_delete=models.CASCADE, primary_key=True) def __str__(self): return f\"{self.user.first_name} {self.user.last_name}\" class Assignment(models.Model): assignment_id = models.IntegerField(blank=False, primary_key=True) student = models.ForeignKey('Student', on_delete=models.CASCADE) homework = models.ForeignKey('Homework', on_delete=models.CASCADE) grade = models.CharField(default='-', max_length=5, blank=True) submission = models.CharField(max_length=300, blank=True) def __str__(self): return f'{self.student.user.first_name} {self.student.user.last_name}:\\ {self.homework.name}\\ | {\"graded\" if self.grade != \"-\" else \"submitted\" if len(self.submission) else \"in process\"}' @receiver(models.signals.post_save, sender=Homework) def execute_after_save(sender, instance, created, *args, **kwargs): if created: students = Student.objects.all() for student in students: duplicates = Assignment.objects.filter(student=student, homework=instance).all() if not len(duplicates): assignment = Assignment(student=student, homework=instance) assignment.save() \u0414\u043b\u044f \u0432\u0435\u0440\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0440\u043e\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0444\u0430\u0439\u043b decorators.py, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 student_required \u0438 teacher_required \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0440\u043e\u043b\u0435\u0439: from django.contrib.auth import REDIRECT_FIELD_NAME from django.contrib.auth.decorators import user_passes_test def student_required(function=None, redirect_field_name=REDIRECT_FIELD_NAME, login_url='login'): ''' Decorator for views that checks that the logged in user is a student, redirects to the log-in page if necessary. ''' actual_decorator = user_passes_test( lambda u: u.is_active and u.is_student, login_url=login_url, redirect_field_name=redirect_field_name ) if function: return actual_decorator(function) return actual_decorator def teacher_required(function=None, redirect_field_name=REDIRECT_FIELD_NAME, login_url='login'): ''' Decorator for views that checks that the logged in user is a teacher, redirects to the log-in page if necessary. ''' actual_decorator = user_passes_test( lambda u: u.is_active and u.is_teacher, login_url=login_url, redirect_field_name=redirect_field_name ) if function: return actual_decorator(function) return actual_decorator \u0414\u0430\u043b\u0435\u0435 \u044d\u0442\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 views.py, \u043a\u0443\u0434\u0430 \u0432\u043d\u0435\u0441\u0435\u043d\u044b \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u0434\u043b\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 class_grades_list (\u0447\u0442\u043e\u0431\u044b \u0443\u0447\u0435\u043d\u0438\u043a\u0443 \u0431\u044b\u043b\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0442\u043e\u0442\u043b\u044c\u043a\u043e \u0435\u0433\u043e \u043e\u0446\u0435\u043d\u043a\u0438, \u0430 \u0443\u0447\u0438\u0442\u0435\u043b\u044e - \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445). \u0422\u0430\u043a\u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 @login_required from django.shortcuts import render, redirect from django.urls import reverse from django.db import IntegrityError from django.contrib.auth import authenticate, login, logout from django.views.generic import CreateView, ListView, DetailView from django.contrib.auth.decorators import login_required from django.utils.decorators import method_decorator from homework_app.models import Student, Homework, Assignment,User,Teacher from homework_app.forms import AssignmentForm,StudentSignUpForm,TeacherSignUpForm,HomeworkForm from homework_app.decorators import student_required,teacher_required from django.http import HttpResponseRedirect class StudentSignUpView(CreateView): model = User form_class = StudentSignUpForm template_name = 'register.html' def get_context_data(self, **kwargs): kwargs['user_type'] = 'student' return super().get_context_data(**kwargs) def form_valid(self, form): user = form.save() login(self.request, user) return redirect('login') class TearchSignUpView(CreateView): model = User form_class = TeacherSignUpForm template_name = 'register.html' def get_context_data(self, **kwargs): kwargs['user_type'] = 'teacher' return super().get_context_data(**kwargs) def form_valid(self, form): user = form.save() login(self.request, user) return redirect('login') @method_decorator(teacher_required, name='dispatch') class HomeworkCreate(CreateView): model = Homework form_class: HomeworkForm template_name = 'createhomework.html' fields = \"__all__\" def get_context_data(self, **kwargs): context = super().get_context_data(**kwargs) context['form'] = HomeworkForm() return context def form_valid(self, form): form.save() return redirect('homework_list') def log_in(request): # if request.user.is_authenticated: # return redirect('homework_list') if request.method == \"POST\": username = request.POST['username'] password = request.POST['password'] user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect(reverse('homework_list')) else: error_text = 'invalid credentials' return render(request, 'login.html', locals()) @login_required def log_out(request): logout(request) return redirect(reverse('login')) @login_required @teacher_required def class_grades_list(request): context = {} students = Student.objects.all() context[\"students\"] = students context[\"homeworks\"] = Homework.objects.all() context[\"grades\"] = {} assignments = Assignment.objects.all() for homework in context[\"homeworks\"]: for assignment in assignments: if assignment.homework == homework and assignment.student.pk != 3: if not assignment.student.pk in context[\"grades\"]: context[\"grades\"][assignment.student.pk] = [] context[\"grades\"][assignment.student.pk].append( assignment.grade) return render(request, 'class_grades.html', context) @method_decorator(login_required, name='dispatch') class HomeworkList(ListView): model = Homework template_name = 'homework_list.html' @method_decorator(login_required, name='dispatch') class HomeworkDetail(DetailView): model = Homework template_name = 'homework_detail.html' def get_context_data(self, **kwargs): context = super().get_context_data(**kwargs) context['form'] = AssignmentForm() return context @method_decorator(student_required, name='dispatch') class AssignmentView(ListView): model = Assignment template_name = 'studentgrade.html' def get_queryset(self): studentt=Student.objects.get(user=self.request.user) return Assignment.objects.filter(student=studentt) @login_required def hand_in(request, pk): homework = Homework.objects.get(pk=pk) studentt = Student.objects.get(user=request.user) assignment = Assignment.objects.get(student=studentt,homework=homework) form = AssignmentForm(request.POST,instance=assignment) if form.is_valid(): form.save() return redirect(reverse('homework_list')) templates (\u043d\u043e\u0432\u044b\u0435 \u0438 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b\u0435): base.html - Bootstrap: <!DOCTYPE html> Homework <!-- CSS only --> <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi\" crossorigin=\"anonymous\"> </head> <body> {% comment %} <nav> {% if user.is_authenticated %} <a href=\"{% url 'class_grades' %}\">Class grades</a> {% if user.is_student %} <a href=\"{% url 'homework_list' %}\">My homework</a> {% endif %} <a href=\"{% url 'logout' %}\">Log out</a> <span> {{ user.username }} </span> {% endif %} </nav> {% endcomment %} <nav class=\"navbar navbar-expand-lg navbar-dark bg-primary\"> <div class=\"container-fluid\"> {% if user.is_student%} <span class=\"navbar-brand\" >Student</span> {% endif %} {% if user.is_teacher%} <span class=\"navbar-brand\" >Teacher</span> {% endif %} <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarColor01\" aria-controls=\"navbarColor01\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarColor01\"> <ul class=\"navbar-nav me-auto\"> {% if user.is_authenticated %} <li class=\"nav-item\"> <a class=\"nav-link active\"href=\"{% url 'homework_list' %}\">Home <span class=\"visually-hidden\">(current)</span> </a> </li> {% endif %} {% if user.is_teacher %} <li class=\"nav-item\"> <a class=\"nav-link\" href=\"{% url 'class_grades' %}\">Class Grades</a> </li> {% endif %} {% if not user.is_authenticated %} <li class=\"nav-item\"> <a class=\"nav-link\" href=\"{% url 'login' %}\">Log in</a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"{% url 'register' %}\">Register</a> </li> {% endif %} {% if user.is_student %} <li class=\"nav-item\"> <a class=\"nav-link\" href=\"{% url 'mygrade' %}\">My grade</a> </li> {% endif %} {% if user.is_teacher%} <li class=\"nav-item\"> <a class=\"nav-link\" href=\"{% url 'homework_create' %}\">Add homework</a> </li> {% endif %} {% if user.is_authenticated %} <li class=\"nav-item\"> <a class=\"nav-link\" href=\"{% url 'logout' %}\">Log out</a> </li> {% endif %} </ul> </div> </div> </nav> <br/> {% block body %} {% endblock %} </body> </html> createhomework.html- \u0443\u0447\u0438\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0434\u043e\u043c\u0430\u0448\u043a\u0443 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0437 \u0430\u0434\u043c\u0438\u043d\u043a\u0438 {% extends 'base.html' %} {% load crispy_forms_tags %} {% block body %} <div class=\"row\"> <div class=\"col-md-8 col-sm-10 col-12\"> <h2>Create Homework</h2> <form method=\"post\" novalidate> {% csrf_token %} <input type=\"hidden\" name=\"next\" value=\"{{ next }}\"> {{ form|crispy }} <p class=\"text-16\">{{ form.error_msg }} {{ form.non_field_errors }} {{ form.errors }}</p> <button type=\"submit\" class=\"btn btn-success\">Create</button> </form> </div> </div> {% endblock %} studentgrade.html - \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0443\u0447\u0438\u0442\u0435\u043b\u044e: {% extends 'base.html' %} {% block body %} <table> <tr> <th>Grade of Student </th> </tr> {% for ass in object_list %} <tr> <td>{{ ass.homework.name }}</td> <td> {{ass.grade}} </tr> {% endfor %} </table> {% endblock %} \u0424\u0430\u0439\u043b admin.py - \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0440\u043e\u043b\u0438 \u0434\u043b\u044f \u0443\u0447\u0438\u0442\u0435\u043b\u044f \u043d\u0430 \u043f\u0430\u043d\u0435\u043b\u0438: from django.contrib import admin from .models import * admin.site.register(Student) admin.site.register(Homework) admin.site.register(Assignment) admin.site.register(Teacher) admin.site.register(User) \u0422\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d debug-toolbar \u0434\u043b\u044f \u0440\u0435\u0436\u0438\u043c\u0430 \u043e\u0442\u043b\u0430\u0434\u043a\u0438 (\u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043b\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u044b).","title":"\u041f\u0440\u0438\u043b\u0438\u0447\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f"},{"location":"l3/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3 \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u041c\u043e\u0434\u0435\u043b\u044c - \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 \u0438\u0437 \u0432\u0442\u043e\u0440\u043e\u0439 \u043b\u0430\u0431\u044b \u0427\u0430\u0441\u0442\u044c 1 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 Owner(owner_id=2, date_of_birth='1998-04-02', passport=20895878, address='Tbilisi', nationality=\"Georgian\", first_name='Irakli', username='super_irakli').save() Owner(owner_id=3, date_of_birth='1999-04-17', passport=34895878, address='Paris', nationality=\"Russian\", first_name='Yaroslav', username='yarik').save() Owner(owner_id=4, date_of_birth='2002-03-15', passport=22295878, address='Lanskoe shosse', nationality=\"Russian\", first_name='Mnatsakan', username='mnats').save() Owner(owner_id=5, date_of_birth='2003-07-18', passport=555295878, address='Gorokhovaya street', nationality=\"Georgian\", first_name='Gregory', username='greggeo').save() Owner(owner_id=6, date_of_birth='1999-04-17', passport=348978, address='Paris', nationality=\"Armenian\", first_name='Kristina', username='kris').save() Owner(owner_id=7, date_of_birth='1995-08-08', passport=89895878, address='Paris', nationality=\"Armenian\", first_name='Ashot', username='ashotik').save() Owner(owner_id=9, date_of_birth='1999-12-09', passport=128734878, address='Tbilisi', nationality=\"Russian\", first_name='Olga', username='olgaku').save() Owner(owner_id=10, date_of_birth='1992-06-29', passport=1537734878, address='Batumi', nationality=\"Russian\", first_name='Polina', username='bellepolie').save() Owner(owner_id=11, date_of_birth='1986-03-09', passport=56734878, address='Batumi', nationality=\"Russian\", first_name='Ilya', username='ilya3').save() \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 Car(id_number=2, brand=\"Honda\",car_model=\"a\",color=\"white\",official_number=\"A167B\").save() Car(id_number=3, brand=\"Honda\",car_model=\"b\",color=\"dark green\",official_number=\"C647B\").save() Car(id_number=4, brand=\"Renault\",car_model=\"a\",color=\"pink\",official_number=\"D897D\").save() Car(id_number=5, brand=\"Renault\",car_model=\"b\",color=\"white\",official_number=\"I790E\").save() Car(id_number=6, brand=\"Puegeot\",car_model=\"b\",color=\"white\",official_number=\"O654P\").save() Car(id_number=7, brand=\"Puegeot\",car_model=\"a\",color=\"dark blue\",official_number=\"J932K\").save() Car(id_number=8, brand=\"Honda\",car_model=\"a\",color=\"pink\",official_number=\"J937K\").save() Car(id_number=9, brand=\"Honda\",car_model=\"b\",color=\"pink\",official_number=\"J587H\").save() Car(id_number=10, brand=\"Renault\",car_model=\"a\",color=\"dark blue\",official_number=\"M787M\").save() \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u043f\u0440\u0430\u0432 DrivingLicense(number=2, owner=Owner.objects.get(owner_id=2), type=\"A\", date_of_issue=\"2020-11-10\").save() DrivingLicense(number=3, owner=Owner.objects.get(owner_id=3), type=\"B\", date_of_issue=\"2020-12-06\").save() DrivingLicense(number=4, owner=Owner.objects.get(owner_id=4), type=\"D\", date_of_issue=\"2020-10-29\").save() DrivingLicense(number=5, owner=Owner.objects.get(owner_id=5), type=\"B\", date_of_issue=\"2021-02-08\").save() DrivingLicense(number=6, owner=Owner.objects.get(owner_id=6), type=\"B\", date_of_issue=\"2021-03-08\").save() DrivingLicense(number=7, owner=Owner.objects.get(owner_id=7), type=\"B\", date_of_issue=\"2020-07-09\").save() DrivingLicense(number=8, owner=Owner.objects.get(owner_id=8), type=\"D\", date_of_issue=\"2021-07-13\").save() DrivingLicense(number=9, owner=Owner.objects.get(owner_id=9), type=\"D\", date_of_issue=\"2021-09-18\").save() DrivingLicense(number=10, owner=Owner.objects.get(owner_id=10), type=\"D\", date_of_issue=\"2020-12-18\").save() DrivingLicense(number=11, owner=Owner.objects.get(owner_id=11), type=\"D\", date_of_issue=\"2020-11-11\").save() \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438 Owning(owner=Owner.objects.get(owner_id=3), car=Car.objects.get(id_number=2), begin_date='2010-04-08', end_date='2011-04-02').save() Owning(owner=Owner.objects.get(owner_id=4), car=Car.objects.get(id_number=4), begin_date='2010-04-08', end_date='2011-08-02').save() Owning(owner=Owner.objects.get(owner_id=5), car=Car.objects.get(id_number=5), begin_date='2011-04-08', end_date='2012-08-02').save() Owning(owner=Owner.objects.get(owner_id=6), car=Car.objects.get(id_number=6), begin_date='2011-05-06', end_date='2013-08-02').save() Owning(owner=Owner.objects.get(owner_id=7), car=Car.objects.get(id_number=7), begin_date='2013-09-06', end_date='2014-08-02').save() Owning(owner=Owner.objects.get(owner_id=8), car=Car.objects.get(id_number=8), begin_date='2013-10-06', end_date='2014-10-02').save() \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u0427\u0430\u0441\u0442\u044c 2 \u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: - \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c) Car.objects.filter (brand = \"Renault\") \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435) Owner.objects.filter (first_name=\"Ashot\") \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0410\u0448\u043e\u0442 \u0431\u044b\u043b \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c, \u043d\u0430 \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u0435 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043f\u043e\u0441\u043b\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0410\u0448\u043e\u0442\u0430, \u0438\u0445 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0434\u0432\u043e\u0435 \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) needed_id = Owner.objects.all()[2].owner_id DrivingLicense.objects.get(owner_id=needed_id) \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442) Owner.objects.filter(owning_car__car__color=\"pink\") \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435) Owner.objects.filter(owning_car__begin_date__gte=\"2010-12-12\") \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u0427\u0430\u0441\u0442\u044c 3 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f from django.db.models import Avg ,Min,Max, Count DrivingLicense.objects.aggregate(begin_date = Min(\"date_of_issue\")) \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 Owning.objects.filter(car_id__car_model=\"a\").aggregate(begin_date = Max(\"begin_date\")) \u041d\u0430 \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u0435 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0441 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e 'b' \u0432\u044b\u0432\u043e\u0434 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f. \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f Owning.objects.values(\"owner_id\").annotate(Count(\"car\")) \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 Car.objects.values(\"brand\").annotate(Count(\"id_number\")) \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f (\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043e\u0434\u043d\u0438 \u0438 \u0442\u0435 \u0436\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043c\u0435\u0442\u043e\u0434\u043e\u043c .distinct() DrivingLicense.objects.values(\"owner\").order_by(\"date_of_issue\") \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 - \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0441\u043d\u043e\u0432\u044b \u0432\u0437\u044f\u0442\u0430 \u0441\u0445\u0435\u043c\u0430 \u0441 \u041e\u043d\u043b\u0430\u0439\u043d-\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b \u043f\u043e \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u044e SQL - \u0421\u0445\u0435\u043c\u0430 \u041c\u043e\u0434\u0435\u043b\u044c from django.db import models from django.contrib.auth.models import AbstractUser class Book(models.Model): title = models.CharField(max_length=800, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435') authors = models.CharField(max_length=5000, verbose_name='\u0410\u0432\u0442\u043e\u0440(\u044b)') publisher = models.CharField(max_length=79, verbose_name='\u0418\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e') publication_year = models.IntegerField(verbose_name='\u0413\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f') genre = models.CharField(max_length=100, verbose_name='\u0416\u0430\u043d\u0440') book_cypher = models.CharField(max_length=50, verbose_name='\u0428\u0438\u0444\u0440') book_hall = models.ManyToManyField('Hall','BokkCopy', through='BookInHall', verbose_name='\u0417\u0430\u043b') book_reader = models.ManyToManyField('Reader', through='ReaderBook', verbose_name='\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c') def __str__(self): return self.title class Copy(models.Model): id_copy = models.AutoField(\"ID_\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\", primary_key=True) section = models.CharField(max_length=20, verbose_name='\u0420\u0430\u0437\u0434\u0435\u043b') code = models.CharField(max_length=20, verbose_name='\u0410\u0440\u0442\u0438\u043a\u0443\u043b') year = models.IntegerField(verbose_name='\u0413\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f') conditions = ( ('\u0445', '\u0445\u043e\u0440\u043e\u0448\u0435\u0435'), ('\u0443', '\u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435'), ('\u0441', '\u0441\u0442\u0430\u0440\u043e\u0435'), ) condition = models.CharField(max_length=1, choices=conditions, verbose_name='\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430') book = models.ForeignKey('Book', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=models.CASCADE) def __str__(self): return self.code class Hall(models.Model): number = models.IntegerField(verbose_name='\u041d\u043e\u043c\u0435\u0440') title = models.CharField(max_length=500, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435') capacity = models.IntegerField(verbose_name='\u0412\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c') def __str__(self): return str(self.number) + \" - \" + self.title class BookInHall(models.Model): book = models.ForeignKey('Book', on_delete=models.CASCADE, verbose_name='\u041a\u043d\u0438\u0433\u0430') hall = models.ForeignKey('Hall', on_delete=models.CASCADE, verbose_name='\u0417\u0430\u043b',) count = models.IntegerField(verbose_name='\u0427\u0438\u0441\u043b\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432') def __str__(self): return str(self.book) + \" \u0432 \u0437\u0430\u043b\u0435 \" + str(self.hall) + \": \" + str(self.count) class Reader(AbstractUser): username = models.CharField(max_length=30, unique=True) password = models.CharField(max_length=200) REQUIRED_FIELDS = ['card_number', 'first_name', 'last_name', 'passport', 'date_of_birth', 'address', 'phone', 'education', 'degree'] card_number = models.IntegerField(verbose_name='\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0431\u0438\u043b\u0435\u0442', blank=True, null=True) first_name = models.CharField(max_length=25, verbose_name='\u0418\u043c\u044f', blank=True, null=True) last_name = models.CharField(max_length=30, verbose_name='\u0424\u0430\u043c\u0438\u043b\u0438\u044f', blank=True, null=True) passport = models.CharField(max_length=15, verbose_name='\u041f\u0430\u0441\u043f\u043e\u0440\u0442', blank=True, null=True) date_of_birth = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f', blank=True, null=True) address = models.CharField(max_length=300, verbose_name='\u0410\u0434\u0440\u0435\u0441', blank=True, null=True) phone = models.CharField(max_length=11, verbose_name='\u0422\u0435\u043b\u0435\u0444\u043e\u043d', blank=True, null=True) education_options = ( ('\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0431\u0449\u0435\u0435', '\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0431\u0449\u0435\u0435'), ('\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435', '\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435'), ('\u0412\u044b\u0441\u0448\u0435\u0435', '\u0412\u044b\u0441\u0448\u0435\u0435'), ('\u041d\u0435\u043e\u043a\u043e\u043d\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u044b\u0441\u0448\u0435\u0435', '\u041d\u0435\u043e\u043a\u043e\u043d\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u044b\u0441\u0448\u0435\u0435'), ('\u041d\u0435\u043e\u043a\u043e\u043d\u0447\u0435\u043d\u043d\u043e\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0435', '\u041d\u0435\u043e\u043a\u043e\u043d\u0447\u0435\u043d\u043d\u043e\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0435'), ) education = models.CharField(max_length=4000, choices=education_options, default='-', verbose_name='\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435', blank=True, null=True) degree = models.BooleanField(default=False, verbose_name='\u0423\u0447\u0435\u043d\u0430\u044f \u0441\u0442\u0435\u043f\u0435\u043d\u044c', blank=True, null=True) reader_hall = models.ForeignKey('Hall', on_delete=models.CASCADE, verbose_name='\u0417\u0430\u043b', blank=True, null=True) reader_book = models.ManyToManyField('Book', through='ReaderBook', verbose_name='\u041a\u043d\u0438\u0433\u0430') ''' def __str__(self): if self.is_superuser: return 'superuser' return self.last_name + ' ' + self.first_name''' class ReaderBook(models.Model): #book = models.ForeignKey('Book', on_delete=models.CASCADE, verbose_name='\u041a\u043d\u0438\u0433\u0430') id_rb = models.IntegerField(verbose_name='\u043d\u043e\u043c\u0435\u0440 \u0432\u044b\u0434\u0430\u0447\u0438', blank=True, null=False, primary_key=True) id_copy = models.ForeignKey(\"Copy\", verbose_name='Id_ex', on_delete=models.CASCADE) #book = models.ForeignKey('Copy', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=models.CASCADE) book = models.ForeignKey('Book', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=models.CASCADE) reader = models.ForeignKey('Reader', on_delete=models.CASCADE, verbose_name='\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c') issue_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438', blank=True, null=True) due_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430', blank=True, null=True) REST API API \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442 \u043e\u0442\u0432\u0435\u0442, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u041e\u0442\u0432\u0435\u0442 \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043a\u043e\u0434 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u044c\u044e \u043e\u0442\u0432\u0435\u0442\u043d\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f HTTP, \u0438\u043d\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u044e\u0449\u0435\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430. Endpoints - \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 URL-\u0430\u0434\u0440\u0435\u0441\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0434\u043b\u044f \u0441\u0432\u044f\u0437\u0438 \u0441\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c\u0438 \u0441\u043b\u0443\u0436\u0431\u0430\u043c\u0438 \u0438 \u0441\u0432\u043e\u0438\u043c\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438: \u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043d\u0438\u0433: GET /library/books/ HTTP 200 OK Allow: GET, HEAD, OPTIONS Content-Type: application/json Vary: Accept [ { \"id\": 1, \"title\": \"ecume des jours\", \"authors\": \"boris vian\", \"publisher\": \"hachette\", \"publication_year\": 2013, \"genre\": \"drama\", \"book_cypher\": \"111111\", \"book_hall\": [ 2 ], \"book_reader\": [ 3 ] }, \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 GET /library/books/create/ HTTP 405 Method Not Allowed Allow: POST, OPTIONS Content-Type: application/json Vary: Accept { \"detail\": \"Method \\\"GET\\\" not allowed.\" } \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u043a\u043d\u0438\u0433\u0435 \u0438 \u0435\u0451 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435 GET /library/books/01/ HTTP 200 OK Allow: GET, HEAD, OPTIONS Content-Type: application/json Vary: Accept { \"id\": 1, \"book_hall\": [ { \"id\": 2, \"number\": 2, \"title\": \"Drama\", \"capacity\": 10 } ], \"book_reader\": [ { \"id\": 3, \"last_login\": null, \"is_superuser\": false, \"email\": \"b@a.com\", \"is_staff\": false, \"is_active\": true, \"date_joined\": \"2022-12-03T21:10:45.704223Z\", \"username\": \"Ashot\", \"password\": \"pbkdf2_sha256$390000$bZL7e1qcgB0An8pKB8IBYZ$6f1q5wqRAO5I80xcDLKUKDDRUwx65T2CFuwKfPaVXgU=\", \"card_number\": null, \"first_name\": null, \"last_name\": null, \"passport\": null, \"date_of_birth\": null, \"address\": null, \"phone\": null, \"education\": \"-\", \"degree\": false, \"reader_hall\": null, \"groups\": [], \"user_permissions\": [], \"reader_book\": [ 1 ] } ], \"title\": \"ecume des jours\", \"authors\": \"boris vian\", \"publisher\": \"hachette\", \"publication_year\": 2013, \"genre\": \"drama\", \"book_cypher\": \"111111\" } \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 GET /library/books/edit/01/ HTTP 200 OK Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS Content-Type: application/json Vary: Accept { \"id\": 1, \"title\": \"ecume des jours\", \"authors\": \"boris vian\", \"publisher\": \"hachette\", \"publication_year\": 2013, \"genre\": \"drama\", \"book_cypher\": \"111111\", \"book_hall\": [ 2 ], \"book_reader\": [ 3 ] } \u0421\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439 GET /library/readers/ HTTP 200 OK Allow: GET, HEAD, OPTIONS Content-Type: application/json Vary: Accept { \"id\": 2, \"last_login\": null, \"is_superuser\": false, \"email\": \"a@a.com\", \"is_staff\": false, \"is_active\": true, \"date_joined\": \"2022-12-03T21:08:49.728185Z\", \"username\": \"Igor\", \"password\": \"pbkdf2_sha256$390000$AKlcwNoM3QHjBsj8mBPG4L$kYbTFqKteSWw/OJnXqwwLURPYI7tBBJiw4CxsbRt6JQ=\", \"card_number\": null, \"first_name\": null, \"last_name\": null, \"passport\": null, \"date_of_birth\": null, \"address\": null, \"phone\": null, \"education\": \"-\", \"degree\": false, \"reader_hall\": null, \"groups\": [], \"user_permissions\": [], \"reader_book\": [] }, \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f GET /library/readers/create/ HTTP 405 Method Not Allowed Allow: POST, OPTIONS Content-Type: application/json Vary: Accept { \"detail\": \"Method \\\"GET\\\" not allowed.\" } \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435 GET /library/readers/02/ HTTP 200 OK Allow: GET, HEAD, OPTIONS Content-Type: application/json Vary: Accept { \"id\": 2, \"reader_hall\": null, \"reader_book\": [], \"last_login\": null, \"is_superuser\": false, \"email\": \"a@a.com\", \"is_staff\": false, \"is_active\": true, \"date_joined\": \"2022-12-03T21:08:49.728185Z\", \"username\": \"Igor\", \"password\": \"pbkdf2_sha256$390000$AKlcwNoM3QHjBsj8mBPG4L$kYbTFqKteSWw/OJnXqwwLURPYI7tBBJiw4CxsbRt6JQ=\", \"card_number\": null, \"first_name\": null, \"last_name\": null, \"passport\": null, \"date_of_birth\": null, \"address\": null, \"phone\": null, \"education\": \"-\", \"degree\": false, \"groups\": [], \"user_permissions\": [] } \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435 GET /library/readers/edit/02/ HTTP 200 OK Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS Content-Type: application/json Vary: Accept { \"id\": 2, \"last_login\": null, \u0421\u043f\u0438\u0441\u043e\u043a \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 GET /library/copies/ HTTP 200 OK Allow: GET, HEAD, OPTIONS Content-Type: application/json Vary: Accept [ { \"id_copy\": 1, \"section\": \"fiction\", \"code\": \"01\", \"year\": 2013, \"condition\": \"\u0445\", \"book\": 1 }, \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 GET /library/copies/create/ HTTP 405 Method Not Allowed Allow: POST, OPTIONS Content-Type: application/json Vary: Accept { \"detail\": \"Method \\\"GET\\\" not allowed.\" } \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043d\u0438\u0433\u0443 \u0432 \u0437\u0430\u043b GET /library/bookinhall/create/ HTTP 405 Method Not Allowed Allow: POST, OPTIONS Content-Type: application/json Vary: Accept { \"detail\": \"Method \\\"GET\\\" not allowed.\" } \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f - Swagger \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 REST \u0434\u043b\u044f API \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d: path('doc/redoc', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc') urls.py from .views import * app_name = \"library_app\" urlpatterns = [ path('books/', BookListAPIView.as_view()), # \u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043d\u0438\u0433 path('books/create/', BookCreateAPIView.as_view()), # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 path('books/<int:pk>/', BookRetrieveAPIView.as_view()), # \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u043a\u043d\u0438\u0433\u0435 # \u041c\u043e\u0434\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f path('books/edit/<int:pk>/', BookRetrieveUpdateDestroyAPIView.as_view()), path('readers/', ReaderListAPIView.as_view()), # \u0421\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439 path('readers/create/', ReaderCreateAPIView.as_view()), # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439 path('readers/<int:pk>/', ReaderRetrieveAPIView.as_view()), # \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435 #\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u044b path('readers/edit/<int:pk>/', ReaderRetrieveUpdateDestroyAPIView.as_view()), path('copies/', CopyListAPIView.as_view()), path('copies/create/', CopyCreateAPIView.as_view()), #path('copies/<int:pk>/', CopyRetrieveAPIView.as_view()), # book info by id path('bookinhall/create/', BookInhallCreateAPIView.as_view()), #path('inst/<int:pk>/', OneICopy.as_view()), # path('report/', ReportApiView.as_view()), # report ] \u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0427\u0442\u043e\u0431\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c REST API, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 - JSON. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0443\u0436\u043d\u0430 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f - \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0430\u0431\u043b\u0438\u0446 \u0432 json \u0444\u043e\u0440\u043c\u0430\u0442: serializers.py from rest_framework import serializers from .models import * class CopySerializer(serializers.ModelSerializer): class Meta: model = Copy fields = \"__all__\" class BookSerializer(serializers.ModelSerializer): class Meta: model = Book fields = \"__all__\" class BookInhallSerializer(serializers.ModelSerializer): class Meta: model = BookInHall fields = \"__all__\" class HallSerializer(serializers.ModelSerializer): class Meta: model = Hall fields = \"__all__\" class ReaderSerializer(serializers.ModelSerializer): class Meta: model = Reader fields = \"__all__\" def create(self, validated_data): user = Reader( email=validated_data['email'], username=validated_data['username'] ) user.set_password(validated_data['password']) user.save() return user class BookRetrieveSerializer(serializers.ModelSerializer): book_hall = HallSerializer(many=True) book_reader = ReaderSerializer(many=True) class Meta: model = Book fields = \"__all__\" class ReaderRetrieveSerializer(serializers.ModelSerializer): reader_hall = HallSerializer() reader_book = BookSerializer(many=True) class Meta: model = Reader fields = \"__all__\" views.py from django.db.models import Sum from .serializers import * from rest_framework.generics import * class CopyListAPIView(ListAPIView): serializer_class = CopySerializer queryset = Copy.objects.all() class CopyCreateAPIView(CreateAPIView): serializer_class = CopySerializer queryset = Copy.objects.all() class CopykRetrieveUpdateDestroyAPIView(RetrieveUpdateDestroyAPIView): serializer_class = CopySerializer queryset = Copy.objects.all() class BookRetrieveUpdateDestroyAPIView(RetrieveUpdateDestroyAPIView): serializer_class = BookSerializer queryset = Book.objects.all() #class CopyRetrieveAPIView(RetrieveAPIView): #serializer_class = CopyRetrieveSerializer #queryset = Copy.objects.all() class BookListAPIView(ListAPIView): serializer_class = BookSerializer queryset = Book.objects.all() class BookCreateAPIView(CreateAPIView): serializer_class = BookSerializer queryset = Book.objects.all() class BookRetrieveUpdateDestroyAPIView(RetrieveUpdateDestroyAPIView): serializer_class = BookSerializer queryset = Book.objects.all() class BookRetrieveAPIView(RetrieveAPIView): serializer_class = BookRetrieveSerializer queryset = Book.objects.all() class ReaderListAPIView(ListAPIView): serializer_class = ReaderSerializer queryset = Reader.objects.all() class ReaderCreateAPIView(CreateAPIView): serializer_class = ReaderSerializer queryset = Reader.objects.all() class ReaderRetrieveUpdateDestroyAPIView(RetrieveUpdateDestroyAPIView): serializer_class = ReaderSerializer queryset = Reader.objects.all() class ReaderRetrieveAPIView(RetrieveAPIView): serializer_class = ReaderRetrieveSerializer queryset = Reader.objects.all() class BookInhallrListAPIView(ListAPIView): serializer_class = BookInhallSerializer queryset = BookInHall.objects.all() class BookInhallCreateAPIView(CreateAPIView): serializer_class = BookInhallSerializer queryset = BookInHall.objects.all() class BookInhallRetrieveUpdateDestroyAPIView(RetrieveUpdateDestroyAPIView): serializer_class = BookInhallSerializer queryset = BookInHall.objects.all() class HallrListAPIView(ListAPIView): serializer_class = HallSerializer queryset = Hall.objects.all() class HallCreateAPIView(CreateAPIView): serializer_class = HallSerializer queryset = Hall.objects.all() class HallRetrieveUpdateDestroyAPIView(RetrieveUpdateDestroyAPIView): serializer_class = HallSerializer queryset = Hall.objects.all()","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"l3/#3","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3"},{"location":"l3/#_1","text":"\u041c\u043e\u0434\u0435\u043b\u044c - \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 \u0438\u0437 \u0432\u0442\u043e\u0440\u043e\u0439 \u043b\u0430\u0431\u044b","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"l3/#1","text":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 Owner(owner_id=2, date_of_birth='1998-04-02', passport=20895878, address='Tbilisi', nationality=\"Georgian\", first_name='Irakli', username='super_irakli').save() Owner(owner_id=3, date_of_birth='1999-04-17', passport=34895878, address='Paris', nationality=\"Russian\", first_name='Yaroslav', username='yarik').save() Owner(owner_id=4, date_of_birth='2002-03-15', passport=22295878, address='Lanskoe shosse', nationality=\"Russian\", first_name='Mnatsakan', username='mnats').save() Owner(owner_id=5, date_of_birth='2003-07-18', passport=555295878, address='Gorokhovaya street', nationality=\"Georgian\", first_name='Gregory', username='greggeo').save() Owner(owner_id=6, date_of_birth='1999-04-17', passport=348978, address='Paris', nationality=\"Armenian\", first_name='Kristina', username='kris').save() Owner(owner_id=7, date_of_birth='1995-08-08', passport=89895878, address='Paris', nationality=\"Armenian\", first_name='Ashot', username='ashotik').save() Owner(owner_id=9, date_of_birth='1999-12-09', passport=128734878, address='Tbilisi', nationality=\"Russian\", first_name='Olga', username='olgaku').save() Owner(owner_id=10, date_of_birth='1992-06-29', passport=1537734878, address='Batumi', nationality=\"Russian\", first_name='Polina', username='bellepolie').save() Owner(owner_id=11, date_of_birth='1986-03-09', passport=56734878, address='Batumi', nationality=\"Russian\", first_name='Ilya', username='ilya3').save() \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 Car(id_number=2, brand=\"Honda\",car_model=\"a\",color=\"white\",official_number=\"A167B\").save() Car(id_number=3, brand=\"Honda\",car_model=\"b\",color=\"dark green\",official_number=\"C647B\").save() Car(id_number=4, brand=\"Renault\",car_model=\"a\",color=\"pink\",official_number=\"D897D\").save() Car(id_number=5, brand=\"Renault\",car_model=\"b\",color=\"white\",official_number=\"I790E\").save() Car(id_number=6, brand=\"Puegeot\",car_model=\"b\",color=\"white\",official_number=\"O654P\").save() Car(id_number=7, brand=\"Puegeot\",car_model=\"a\",color=\"dark blue\",official_number=\"J932K\").save() Car(id_number=8, brand=\"Honda\",car_model=\"a\",color=\"pink\",official_number=\"J937K\").save() Car(id_number=9, brand=\"Honda\",car_model=\"b\",color=\"pink\",official_number=\"J587H\").save() Car(id_number=10, brand=\"Renault\",car_model=\"a\",color=\"dark blue\",official_number=\"M787M\").save() \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u043f\u0440\u0430\u0432 DrivingLicense(number=2, owner=Owner.objects.get(owner_id=2), type=\"A\", date_of_issue=\"2020-11-10\").save() DrivingLicense(number=3, owner=Owner.objects.get(owner_id=3), type=\"B\", date_of_issue=\"2020-12-06\").save() DrivingLicense(number=4, owner=Owner.objects.get(owner_id=4), type=\"D\", date_of_issue=\"2020-10-29\").save() DrivingLicense(number=5, owner=Owner.objects.get(owner_id=5), type=\"B\", date_of_issue=\"2021-02-08\").save() DrivingLicense(number=6, owner=Owner.objects.get(owner_id=6), type=\"B\", date_of_issue=\"2021-03-08\").save() DrivingLicense(number=7, owner=Owner.objects.get(owner_id=7), type=\"B\", date_of_issue=\"2020-07-09\").save() DrivingLicense(number=8, owner=Owner.objects.get(owner_id=8), type=\"D\", date_of_issue=\"2021-07-13\").save() DrivingLicense(number=9, owner=Owner.objects.get(owner_id=9), type=\"D\", date_of_issue=\"2021-09-18\").save() DrivingLicense(number=10, owner=Owner.objects.get(owner_id=10), type=\"D\", date_of_issue=\"2020-12-18\").save() DrivingLicense(number=11, owner=Owner.objects.get(owner_id=11), type=\"D\", date_of_issue=\"2020-11-11\").save() \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438 Owning(owner=Owner.objects.get(owner_id=3), car=Car.objects.get(id_number=2), begin_date='2010-04-08', end_date='2011-04-02').save() Owning(owner=Owner.objects.get(owner_id=4), car=Car.objects.get(id_number=4), begin_date='2010-04-08', end_date='2011-08-02').save() Owning(owner=Owner.objects.get(owner_id=5), car=Car.objects.get(id_number=5), begin_date='2011-04-08', end_date='2012-08-02').save() Owning(owner=Owner.objects.get(owner_id=6), car=Car.objects.get(id_number=6), begin_date='2011-05-06', end_date='2013-08-02').save() Owning(owner=Owner.objects.get(owner_id=7), car=Car.objects.get(id_number=7), begin_date='2013-09-06', end_date='2014-08-02').save() Owning(owner=Owner.objects.get(owner_id=8), car=Car.objects.get(id_number=8), begin_date='2013-10-06', end_date='2014-10-02').save() \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438","title":"\u0427\u0430\u0441\u0442\u044c 1"},{"location":"l3/#2","text":"\u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: - \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c) Car.objects.filter (brand = \"Renault\") \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435) Owner.objects.filter (first_name=\"Ashot\") \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0410\u0448\u043e\u0442 \u0431\u044b\u043b \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c, \u043d\u0430 \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u0435 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043f\u043e\u0441\u043b\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0410\u0448\u043e\u0442\u0430, \u0438\u0445 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0434\u0432\u043e\u0435 \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) needed_id = Owner.objects.all()[2].owner_id DrivingLicense.objects.get(owner_id=needed_id) \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442) Owner.objects.filter(owning_car__car__color=\"pink\") \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435) Owner.objects.filter(owning_car__begin_date__gte=\"2010-12-12\") \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438","title":"\u0427\u0430\u0441\u0442\u044c 2"},{"location":"l3/#3_1","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f from django.db.models import Avg ,Min,Max, Count DrivingLicense.objects.aggregate(begin_date = Min(\"date_of_issue\")) \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 Owning.objects.filter(car_id__car_model=\"a\").aggregate(begin_date = Max(\"begin_date\")) \u041d\u0430 \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u0435 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0441 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e 'b' \u0432\u044b\u0432\u043e\u0434 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f. \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f Owning.objects.values(\"owner_id\").annotate(Count(\"car\")) \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 Car.objects.values(\"brand\").annotate(Count(\"id_number\")) \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f (\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043e\u0434\u043d\u0438 \u0438 \u0442\u0435 \u0436\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043c\u0435\u0442\u043e\u0434\u043e\u043c .distinct() DrivingLicense.objects.values(\"owner\").order_by(\"date_of_issue\") \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438","title":"\u0427\u0430\u0441\u0442\u044c 3"},{"location":"l3/#-","text":"\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0441\u043d\u043e\u0432\u044b \u0432\u0437\u044f\u0442\u0430 \u0441\u0445\u0435\u043c\u0430 \u0441 \u041e\u043d\u043b\u0430\u0439\u043d-\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b \u043f\u043e \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u044e SQL - \u0421\u0445\u0435\u043c\u0430","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 - \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430"},{"location":"l3/#_2","text":"from django.db import models from django.contrib.auth.models import AbstractUser class Book(models.Model): title = models.CharField(max_length=800, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435') authors = models.CharField(max_length=5000, verbose_name='\u0410\u0432\u0442\u043e\u0440(\u044b)') publisher = models.CharField(max_length=79, verbose_name='\u0418\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e') publication_year = models.IntegerField(verbose_name='\u0413\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f') genre = models.CharField(max_length=100, verbose_name='\u0416\u0430\u043d\u0440') book_cypher = models.CharField(max_length=50, verbose_name='\u0428\u0438\u0444\u0440') book_hall = models.ManyToManyField('Hall','BokkCopy', through='BookInHall', verbose_name='\u0417\u0430\u043b') book_reader = models.ManyToManyField('Reader', through='ReaderBook', verbose_name='\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c') def __str__(self): return self.title class Copy(models.Model): id_copy = models.AutoField(\"ID_\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\", primary_key=True) section = models.CharField(max_length=20, verbose_name='\u0420\u0430\u0437\u0434\u0435\u043b') code = models.CharField(max_length=20, verbose_name='\u0410\u0440\u0442\u0438\u043a\u0443\u043b') year = models.IntegerField(verbose_name='\u0413\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f') conditions = ( ('\u0445', '\u0445\u043e\u0440\u043e\u0448\u0435\u0435'), ('\u0443', '\u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435'), ('\u0441', '\u0441\u0442\u0430\u0440\u043e\u0435'), ) condition = models.CharField(max_length=1, choices=conditions, verbose_name='\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430') book = models.ForeignKey('Book', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=models.CASCADE) def __str__(self): return self.code class Hall(models.Model): number = models.IntegerField(verbose_name='\u041d\u043e\u043c\u0435\u0440') title = models.CharField(max_length=500, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435') capacity = models.IntegerField(verbose_name='\u0412\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c') def __str__(self): return str(self.number) + \" - \" + self.title class BookInHall(models.Model): book = models.ForeignKey('Book', on_delete=models.CASCADE, verbose_name='\u041a\u043d\u0438\u0433\u0430') hall = models.ForeignKey('Hall', on_delete=models.CASCADE, verbose_name='\u0417\u0430\u043b',) count = models.IntegerField(verbose_name='\u0427\u0438\u0441\u043b\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432') def __str__(self): return str(self.book) + \" \u0432 \u0437\u0430\u043b\u0435 \" + str(self.hall) + \": \" + str(self.count) class Reader(AbstractUser): username = models.CharField(max_length=30, unique=True) password = models.CharField(max_length=200) REQUIRED_FIELDS = ['card_number', 'first_name', 'last_name', 'passport', 'date_of_birth', 'address', 'phone', 'education', 'degree'] card_number = models.IntegerField(verbose_name='\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0431\u0438\u043b\u0435\u0442', blank=True, null=True) first_name = models.CharField(max_length=25, verbose_name='\u0418\u043c\u044f', blank=True, null=True) last_name = models.CharField(max_length=30, verbose_name='\u0424\u0430\u043c\u0438\u043b\u0438\u044f', blank=True, null=True) passport = models.CharField(max_length=15, verbose_name='\u041f\u0430\u0441\u043f\u043e\u0440\u0442', blank=True, null=True) date_of_birth = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f', blank=True, null=True) address = models.CharField(max_length=300, verbose_name='\u0410\u0434\u0440\u0435\u0441', blank=True, null=True) phone = models.CharField(max_length=11, verbose_name='\u0422\u0435\u043b\u0435\u0444\u043e\u043d', blank=True, null=True) education_options = ( ('\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0431\u0449\u0435\u0435', '\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0431\u0449\u0435\u0435'), ('\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435', '\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435'), ('\u0412\u044b\u0441\u0448\u0435\u0435', '\u0412\u044b\u0441\u0448\u0435\u0435'), ('\u041d\u0435\u043e\u043a\u043e\u043d\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u044b\u0441\u0448\u0435\u0435', '\u041d\u0435\u043e\u043a\u043e\u043d\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u044b\u0441\u0448\u0435\u0435'), ('\u041d\u0435\u043e\u043a\u043e\u043d\u0447\u0435\u043d\u043d\u043e\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0435', '\u041d\u0435\u043e\u043a\u043e\u043d\u0447\u0435\u043d\u043d\u043e\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0435'), ) education = models.CharField(max_length=4000, choices=education_options, default='-', verbose_name='\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435', blank=True, null=True) degree = models.BooleanField(default=False, verbose_name='\u0423\u0447\u0435\u043d\u0430\u044f \u0441\u0442\u0435\u043f\u0435\u043d\u044c', blank=True, null=True) reader_hall = models.ForeignKey('Hall', on_delete=models.CASCADE, verbose_name='\u0417\u0430\u043b', blank=True, null=True) reader_book = models.ManyToManyField('Book', through='ReaderBook', verbose_name='\u041a\u043d\u0438\u0433\u0430') ''' def __str__(self): if self.is_superuser: return 'superuser' return self.last_name + ' ' + self.first_name''' class ReaderBook(models.Model): #book = models.ForeignKey('Book', on_delete=models.CASCADE, verbose_name='\u041a\u043d\u0438\u0433\u0430') id_rb = models.IntegerField(verbose_name='\u043d\u043e\u043c\u0435\u0440 \u0432\u044b\u0434\u0430\u0447\u0438', blank=True, null=False, primary_key=True) id_copy = models.ForeignKey(\"Copy\", verbose_name='Id_ex', on_delete=models.CASCADE) #book = models.ForeignKey('Copy', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=models.CASCADE) book = models.ForeignKey('Book', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=models.CASCADE) reader = models.ForeignKey('Reader', on_delete=models.CASCADE, verbose_name='\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c') issue_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438', blank=True, null=True) due_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430', blank=True, null=True)","title":"\u041c\u043e\u0434\u0435\u043b\u044c"},{"location":"l3/#rest-api","text":"API \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442 \u043e\u0442\u0432\u0435\u0442, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u041e\u0442\u0432\u0435\u0442 \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043a\u043e\u0434 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u044c\u044e \u043e\u0442\u0432\u0435\u0442\u043d\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f HTTP, \u0438\u043d\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u044e\u0449\u0435\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430. Endpoints - \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 URL-\u0430\u0434\u0440\u0435\u0441\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0434\u043b\u044f \u0441\u0432\u044f\u0437\u0438 \u0441\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c\u0438 \u0441\u043b\u0443\u0436\u0431\u0430\u043c\u0438 \u0438 \u0441\u0432\u043e\u0438\u043c\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438: \u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043d\u0438\u0433: GET /library/books/ HTTP 200 OK Allow: GET, HEAD, OPTIONS Content-Type: application/json Vary: Accept [ { \"id\": 1, \"title\": \"ecume des jours\", \"authors\": \"boris vian\", \"publisher\": \"hachette\", \"publication_year\": 2013, \"genre\": \"drama\", \"book_cypher\": \"111111\", \"book_hall\": [ 2 ], \"book_reader\": [ 3 ] }, \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 GET /library/books/create/ HTTP 405 Method Not Allowed Allow: POST, OPTIONS Content-Type: application/json Vary: Accept { \"detail\": \"Method \\\"GET\\\" not allowed.\" } \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u043a\u043d\u0438\u0433\u0435 \u0438 \u0435\u0451 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435 GET /library/books/01/ HTTP 200 OK Allow: GET, HEAD, OPTIONS Content-Type: application/json Vary: Accept { \"id\": 1, \"book_hall\": [ { \"id\": 2, \"number\": 2, \"title\": \"Drama\", \"capacity\": 10 } ], \"book_reader\": [ { \"id\": 3, \"last_login\": null, \"is_superuser\": false, \"email\": \"b@a.com\", \"is_staff\": false, \"is_active\": true, \"date_joined\": \"2022-12-03T21:10:45.704223Z\", \"username\": \"Ashot\", \"password\": \"pbkdf2_sha256$390000$bZL7e1qcgB0An8pKB8IBYZ$6f1q5wqRAO5I80xcDLKUKDDRUwx65T2CFuwKfPaVXgU=\", \"card_number\": null, \"first_name\": null, \"last_name\": null, \"passport\": null, \"date_of_birth\": null, \"address\": null, \"phone\": null, \"education\": \"-\", \"degree\": false, \"reader_hall\": null, \"groups\": [], \"user_permissions\": [], \"reader_book\": [ 1 ] } ], \"title\": \"ecume des jours\", \"authors\": \"boris vian\", \"publisher\": \"hachette\", \"publication_year\": 2013, \"genre\": \"drama\", \"book_cypher\": \"111111\" } \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 GET /library/books/edit/01/ HTTP 200 OK Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS Content-Type: application/json Vary: Accept { \"id\": 1, \"title\": \"ecume des jours\", \"authors\": \"boris vian\", \"publisher\": \"hachette\", \"publication_year\": 2013, \"genre\": \"drama\", \"book_cypher\": \"111111\", \"book_hall\": [ 2 ], \"book_reader\": [ 3 ] } \u0421\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439 GET /library/readers/ HTTP 200 OK Allow: GET, HEAD, OPTIONS Content-Type: application/json Vary: Accept { \"id\": 2, \"last_login\": null, \"is_superuser\": false, \"email\": \"a@a.com\", \"is_staff\": false, \"is_active\": true, \"date_joined\": \"2022-12-03T21:08:49.728185Z\", \"username\": \"Igor\", \"password\": \"pbkdf2_sha256$390000$AKlcwNoM3QHjBsj8mBPG4L$kYbTFqKteSWw/OJnXqwwLURPYI7tBBJiw4CxsbRt6JQ=\", \"card_number\": null, \"first_name\": null, \"last_name\": null, \"passport\": null, \"date_of_birth\": null, \"address\": null, \"phone\": null, \"education\": \"-\", \"degree\": false, \"reader_hall\": null, \"groups\": [], \"user_permissions\": [], \"reader_book\": [] }, \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f GET /library/readers/create/ HTTP 405 Method Not Allowed Allow: POST, OPTIONS Content-Type: application/json Vary: Accept { \"detail\": \"Method \\\"GET\\\" not allowed.\" } \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435 GET /library/readers/02/ HTTP 200 OK Allow: GET, HEAD, OPTIONS Content-Type: application/json Vary: Accept { \"id\": 2, \"reader_hall\": null, \"reader_book\": [], \"last_login\": null, \"is_superuser\": false, \"email\": \"a@a.com\", \"is_staff\": false, \"is_active\": true, \"date_joined\": \"2022-12-03T21:08:49.728185Z\", \"username\": \"Igor\", \"password\": \"pbkdf2_sha256$390000$AKlcwNoM3QHjBsj8mBPG4L$kYbTFqKteSWw/OJnXqwwLURPYI7tBBJiw4CxsbRt6JQ=\", \"card_number\": null, \"first_name\": null, \"last_name\": null, \"passport\": null, \"date_of_birth\": null, \"address\": null, \"phone\": null, \"education\": \"-\", \"degree\": false, \"groups\": [], \"user_permissions\": [] } \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435 GET /library/readers/edit/02/ HTTP 200 OK Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS Content-Type: application/json Vary: Accept { \"id\": 2, \"last_login\": null, \u0421\u043f\u0438\u0441\u043e\u043a \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 GET /library/copies/ HTTP 200 OK Allow: GET, HEAD, OPTIONS Content-Type: application/json Vary: Accept [ { \"id_copy\": 1, \"section\": \"fiction\", \"code\": \"01\", \"year\": 2013, \"condition\": \"\u0445\", \"book\": 1 }, \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 GET /library/copies/create/ HTTP 405 Method Not Allowed Allow: POST, OPTIONS Content-Type: application/json Vary: Accept { \"detail\": \"Method \\\"GET\\\" not allowed.\" } \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043d\u0438\u0433\u0443 \u0432 \u0437\u0430\u043b GET /library/bookinhall/create/ HTTP 405 Method Not Allowed Allow: POST, OPTIONS Content-Type: application/json Vary: Accept { \"detail\": \"Method \\\"GET\\\" not allowed.\" }","title":"REST API"},{"location":"l3/#-swagger","text":"\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 REST \u0434\u043b\u044f API \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d: path('doc/redoc', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc') urls.py from .views import * app_name = \"library_app\" urlpatterns = [ path('books/', BookListAPIView.as_view()), # \u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043d\u0438\u0433 path('books/create/', BookCreateAPIView.as_view()), # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 path('books/<int:pk>/', BookRetrieveAPIView.as_view()), # \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u043a\u043d\u0438\u0433\u0435 # \u041c\u043e\u0434\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f path('books/edit/<int:pk>/', BookRetrieveUpdateDestroyAPIView.as_view()), path('readers/', ReaderListAPIView.as_view()), # \u0421\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439 path('readers/create/', ReaderCreateAPIView.as_view()), # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439 path('readers/<int:pk>/', ReaderRetrieveAPIView.as_view()), # \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435 #\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u044b path('readers/edit/<int:pk>/', ReaderRetrieveUpdateDestroyAPIView.as_view()), path('copies/', CopyListAPIView.as_view()), path('copies/create/', CopyCreateAPIView.as_view()), #path('copies/<int:pk>/', CopyRetrieveAPIView.as_view()), # book info by id path('bookinhall/create/', BookInhallCreateAPIView.as_view()), #path('inst/<int:pk>/', OneICopy.as_view()), # path('report/', ReportApiView.as_view()), # report ]","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f - Swagger"},{"location":"l3/#_3","text":"\u0427\u0442\u043e\u0431\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c REST API, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 - JSON. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0443\u0436\u043d\u0430 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f - \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0430\u0431\u043b\u0438\u0446 \u0432 json \u0444\u043e\u0440\u043c\u0430\u0442: serializers.py from rest_framework import serializers from .models import * class CopySerializer(serializers.ModelSerializer): class Meta: model = Copy fields = \"__all__\" class BookSerializer(serializers.ModelSerializer): class Meta: model = Book fields = \"__all__\" class BookInhallSerializer(serializers.ModelSerializer): class Meta: model = BookInHall fields = \"__all__\" class HallSerializer(serializers.ModelSerializer): class Meta: model = Hall fields = \"__all__\" class ReaderSerializer(serializers.ModelSerializer): class Meta: model = Reader fields = \"__all__\" def create(self, validated_data): user = Reader( email=validated_data['email'], username=validated_data['username'] ) user.set_password(validated_data['password']) user.save() return user class BookRetrieveSerializer(serializers.ModelSerializer): book_hall = HallSerializer(many=True) book_reader = ReaderSerializer(many=True) class Meta: model = Book fields = \"__all__\" class ReaderRetrieveSerializer(serializers.ModelSerializer): reader_hall = HallSerializer() reader_book = BookSerializer(many=True) class Meta: model = Reader fields = \"__all__\" views.py from django.db.models import Sum from .serializers import * from rest_framework.generics import * class CopyListAPIView(ListAPIView): serializer_class = CopySerializer queryset = Copy.objects.all() class CopyCreateAPIView(CreateAPIView): serializer_class = CopySerializer queryset = Copy.objects.all() class CopykRetrieveUpdateDestroyAPIView(RetrieveUpdateDestroyAPIView): serializer_class = CopySerializer queryset = Copy.objects.all() class BookRetrieveUpdateDestroyAPIView(RetrieveUpdateDestroyAPIView): serializer_class = BookSerializer queryset = Book.objects.all() #class CopyRetrieveAPIView(RetrieveAPIView): #serializer_class = CopyRetrieveSerializer #queryset = Copy.objects.all() class BookListAPIView(ListAPIView): serializer_class = BookSerializer queryset = Book.objects.all() class BookCreateAPIView(CreateAPIView): serializer_class = BookSerializer queryset = Book.objects.all() class BookRetrieveUpdateDestroyAPIView(RetrieveUpdateDestroyAPIView): serializer_class = BookSerializer queryset = Book.objects.all() class BookRetrieveAPIView(RetrieveAPIView): serializer_class = BookRetrieveSerializer queryset = Book.objects.all() class ReaderListAPIView(ListAPIView): serializer_class = ReaderSerializer queryset = Reader.objects.all() class ReaderCreateAPIView(CreateAPIView): serializer_class = ReaderSerializer queryset = Reader.objects.all() class ReaderRetrieveUpdateDestroyAPIView(RetrieveUpdateDestroyAPIView): serializer_class = ReaderSerializer queryset = Reader.objects.all() class ReaderRetrieveAPIView(RetrieveAPIView): serializer_class = ReaderRetrieveSerializer queryset = Reader.objects.all() class BookInhallrListAPIView(ListAPIView): serializer_class = BookInhallSerializer queryset = BookInHall.objects.all() class BookInhallCreateAPIView(CreateAPIView): serializer_class = BookInhallSerializer queryset = BookInHall.objects.all() class BookInhallRetrieveUpdateDestroyAPIView(RetrieveUpdateDestroyAPIView): serializer_class = BookInhallSerializer queryset = BookInHall.objects.all() class HallrListAPIView(ListAPIView): serializer_class = HallSerializer queryset = Hall.objects.all() class HallCreateAPIView(CreateAPIView): serializer_class = HallSerializer queryset = Hall.objects.all() class HallRetrieveUpdateDestroyAPIView(RetrieveUpdateDestroyAPIView): serializer_class = HallSerializer queryset = Hall.objects.all()","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"}]}